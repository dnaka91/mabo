---
source: crates/mabo-build/tests/compiler.rs
description: "/// Generic key-value pair.\nstruct KeyValue<K, V> {\n    key: K @1,\n    value: V @2,\n}"
input_file: crates/mabo-parser/tests/inputs/struct_generics.mabo
---
#[allow(unused_imports)]
use ::mabo::buf::{Decode, Encode, Size};
/// Generic key-value pair.
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct KeyValue<K, V> {
    pub key: K,
    pub value: V,
}
#[automatically_derived]
impl<K, V> ::mabo::Encode for KeyValue<K, V>
where
    K: ::mabo::buf::Encode + ::mabo::buf::Size,
    V: ::mabo::buf::Encode + ::mabo::buf::Size,
{
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::mabo::BufMut) {
        let Self { key, value } = self;
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(1, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                key.encode(w);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(2, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                value.encode(w);
            },
        );
        ::mabo::buf::encode_u32(w, ::mabo::buf::END_MARKER);
    }
}
#[automatically_derived]
impl<K, V> ::mabo::Decode for KeyValue<K, V>
where
    K: ::std::fmt::Debug + ::mabo::buf::Decode,
    V: ::std::fmt::Debug + ::mabo::buf::Decode,
{
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::mabo::Buf) -> ::mabo::buf::Result<Self> {
        let mut key: Option<K> = None;
        let mut value: Option<V> = None;
        loop {
            let id = ::mabo::buf::decode_id(r)?;
            match id.value {
                ::mabo::buf::END_MARKER => break,
                1 => key = Some(K::decode(r)?),
                2 => value = Some(V::decode(r)?),
                _ => ::mabo::buf::decode_skip(r, id.encoding)?,
            }
        }
        Ok(Self {
            key: key
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 1,
                    name: Some("key"),
                })?,
            value: value
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 2,
                    name: Some("value"),
                })?,
        })
    }
}
#[automatically_derived]
impl<K, V> ::mabo::buf::Size for KeyValue<K, V>
where
    K: ::mabo::buf::Size,
    V: ::mabo::buf::Size,
{
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        let Self { key, value } = self;
        ::mabo::buf::size_field(1, || { key.size() })
            + ::mabo::buf::size_field(2, || { value.size() })
            + ::mabo::buf::size_u32(::mabo::buf::END_MARKER)
    }
}

