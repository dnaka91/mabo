---
source: crates/mabo-build/tests/compiler.rs
description: "/// Basic struct.\nstruct Sample(u32 @1, bool @2)"
input_file: crates/mabo-parser/tests/inputs/struct_tuple.mabo
---
#[allow(unused_imports)]
use ::mabo::buf::{Decode, Encode, Size};
/// Basic struct.
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct Sample(pub u32, pub bool);
#[automatically_derived]
impl ::mabo::Encode for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::mabo::BufMut) {
        let Self(n0, n1) = self;
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(1, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_u32(w, *n0);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(2, ::mabo::FieldEncoding::Fixed1),
            |w| {
                ::mabo::buf::encode_bool(w, *n1);
            },
        );
        ::mabo::buf::encode_u32(w, ::mabo::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::mabo::Decode for Sample {
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::mabo::Buf) -> ::mabo::buf::Result<Self> {
        let mut n0: Option<u32> = None;
        let mut n1: Option<bool> = None;
        loop {
            let id = ::mabo::buf::decode_id(r)?;
            match id.value {
                ::mabo::buf::END_MARKER => break,
                1 => n0 = Some(::mabo::buf::decode_u32(r)?),
                2 => n1 = Some(::mabo::buf::decode_bool(r)?),
                _ => ::mabo::buf::decode_skip(r, id.encoding)?,
            }
        }
        Ok(
            Self(
                n0
                    .ok_or(::mabo::buf::Error::MissingField {
                        id: 1,
                        name: None,
                    })?,
                n1
                    .ok_or(::mabo::buf::Error::MissingField {
                        id: 2,
                        name: None,
                    })?,
            ),
        )
    }
}
#[automatically_derived]
impl ::mabo::buf::Size for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        let Self(n0, n1) = self;
        ::mabo::buf::size_field(1, || { ::mabo::buf::size_u32(*n0) })
            + ::mabo::buf::size_field(2, || { ::mabo::buf::size_bool(*n1) })
            + ::mabo::buf::END_MARKER_SIZE
    }
}
