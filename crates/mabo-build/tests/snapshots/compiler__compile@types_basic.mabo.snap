---
source: crates/mabo-build/tests/compiler.rs
description: "struct Sample {\n    f01: bool @1,\n    f02: u8 @2,\n    f03: u16 @3,\n    f04: u32 @4,\n    f05: u64 @5,\n    f06: u128 @6,\n    f07: i8 @7,\n    f08: i16 @8,\n    f09: i32 @9,\n    f10: i64 @10,\n    f11: i128 @11,\n    f12: f32 @12,\n    f13: f64 @13,\n    f14: string @14,\n    f15: &string @15,\n    f16: bytes @16,\n    f17: &bytes @17,\n    f18: box<string> @18,\n    f19: box<bytes> @19,\n    f20: (u32, u32, u32) @20,\n    f21: [u32; 12] @21,\n}"
input_file: crates/mabo-parser/tests/inputs/types_basic.mabo
---
#[allow(unused_imports)]
use ::mabo::buf::{Decode, Encode, Size};
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct Sample {
    pub f01: bool,
    pub f02: u8,
    pub f03: u16,
    pub f04: u32,
    pub f05: u64,
    pub f06: u128,
    pub f07: i8,
    pub f08: i16,
    pub f09: i32,
    pub f10: i64,
    pub f11: i128,
    pub f12: f32,
    pub f13: f64,
    pub f14: String,
    pub f15: String,
    pub f16: Vec<u8>,
    pub f17: Vec<u8>,
    pub f18: Box<str>,
    pub f19: Box<[u8]>,
    pub f20: (u32, u32, u32),
    pub f21: [u32; 12],
}
#[automatically_derived]
impl ::mabo::Encode for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::mabo::BufMut) {
        let Self {
            f01,
            f02,
            f03,
            f04,
            f05,
            f06,
            f07,
            f08,
            f09,
            f10,
            f11,
            f12,
            f13,
            f14,
            f15,
            f16,
            f17,
            f18,
            f19,
            f20,
            f21,
        } = self;
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(1, ::mabo::FieldEncoding::Fixed1),
            |w| {
                ::mabo::buf::encode_bool(w, *f01);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(2, ::mabo::FieldEncoding::Fixed1),
            |w| {
                ::mabo::buf::encode_u8(w, *f02);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(3, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_u16(w, *f03);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(4, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_u32(w, *f04);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(5, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_u64(w, *f05);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(6, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_u128(w, *f06);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(7, ::mabo::FieldEncoding::Fixed1),
            |w| {
                ::mabo::buf::encode_i8(w, *f07);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(8, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_i16(w, *f08);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(9, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_i32(w, *f09);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(10, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_i64(w, *f10);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(11, ::mabo::FieldEncoding::Varint),
            |w| {
                ::mabo::buf::encode_i128(w, *f11);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(12, ::mabo::FieldEncoding::Fixed4),
            |w| {
                ::mabo::buf::encode_f32(w, *f12);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(13, ::mabo::FieldEncoding::Fixed8),
            |w| {
                ::mabo::buf::encode_f64(w, *f13);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(14, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                ::mabo::buf::encode_string(w, f14);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(15, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                ::mabo::buf::encode_string(w, f15);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(16, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                ::mabo::buf::encode_bytes_std(w, f16);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(17, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                ::mabo::buf::encode_bytes_std(w, f17);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(18, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                ::mabo::buf::encode_string(w, f18);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(19, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                ::mabo::buf::encode_bytes_std(w, f19);
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(20, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                ::mabo::buf::encode_tuple(
                    w,
                    || {
                        ::mabo::buf::size_u32(*&f20.0) + ::mabo::buf::size_u32(*&f20.1)
                            + ::mabo::buf::size_u32(*&f20.2)
                    },
                    |w| {
                        ::mabo::buf::encode_u32(w, *&f20.0);
                        ::mabo::buf::encode_u32(w, *&f20.1);
                        ::mabo::buf::encode_u32(w, *&f20.2);
                    },
                );
            },
        );
        ::mabo::buf::encode_field(
            w,
            ::mabo::FieldId::new(21, ::mabo::FieldEncoding::LengthPrefixed),
            |w| {
                ::mabo::buf::encode_array(
                    w,
                    f21,
                    |v| { ::mabo::buf::size_u32(*v) },
                    |w, v| {
                        ::mabo::buf::encode_u32(w, *v);
                    },
                );
            },
        );
        ::mabo::buf::encode_u32(w, ::mabo::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::mabo::Decode for Sample {
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::mabo::Buf) -> ::mabo::buf::Result<Self> {
        let mut f01: Option<bool> = None;
        let mut f02: Option<u8> = None;
        let mut f03: Option<u16> = None;
        let mut f04: Option<u32> = None;
        let mut f05: Option<u64> = None;
        let mut f06: Option<u128> = None;
        let mut f07: Option<i8> = None;
        let mut f08: Option<i16> = None;
        let mut f09: Option<i32> = None;
        let mut f10: Option<i64> = None;
        let mut f11: Option<i128> = None;
        let mut f12: Option<f32> = None;
        let mut f13: Option<f64> = None;
        let mut f14: Option<String> = None;
        let mut f15: Option<String> = None;
        let mut f16: Option<Vec<u8>> = None;
        let mut f17: Option<Vec<u8>> = None;
        let mut f18: Option<Box<str>> = None;
        let mut f19: Option<Box<[u8]>> = None;
        let mut f20: Option<(u32, u32, u32)> = None;
        let mut f21: Option<[u32; 12]> = None;
        loop {
            let id = ::mabo::buf::decode_id(r)?;
            match id.value {
                ::mabo::buf::END_MARKER => break,
                1 => f01 = Some(::mabo::buf::decode_bool(r)?),
                2 => f02 = Some(::mabo::buf::decode_u8(r)?),
                3 => f03 = Some(::mabo::buf::decode_u16(r)?),
                4 => f04 = Some(::mabo::buf::decode_u32(r)?),
                5 => f05 = Some(::mabo::buf::decode_u64(r)?),
                6 => f06 = Some(::mabo::buf::decode_u128(r)?),
                7 => f07 = Some(::mabo::buf::decode_i8(r)?),
                8 => f08 = Some(::mabo::buf::decode_i16(r)?),
                9 => f09 = Some(::mabo::buf::decode_i32(r)?),
                10 => f10 = Some(::mabo::buf::decode_i64(r)?),
                11 => f11 = Some(::mabo::buf::decode_i128(r)?),
                12 => f12 = Some(::mabo::buf::decode_f32(r)?),
                13 => f13 = Some(::mabo::buf::decode_f64(r)?),
                14 => f14 = Some(::mabo::buf::decode_string(r)?),
                15 => f15 = Some(::mabo::buf::decode_string(r)?),
                16 => f16 = Some(::mabo::buf::decode_bytes_std(r)?),
                17 => f17 = Some(::mabo::buf::decode_bytes_std(r)?),
                18 => f18 = Some(Box::<str>::decode(r)?),
                19 => f19 = Some(Box::<[u8]>::decode(r)?),
                20 => {
                    f20 = Some(
                        {
                            ::mabo::buf::decode_u64(r)?;
                            Ok::<
                                _,
                                ::mabo::buf::Error,
                            >((
                                ::mabo::buf::decode_u32(r)?,
                                ::mabo::buf::decode_u32(r)?,
                                ::mabo::buf::decode_u32(r)?,
                            ))
                        }?,
                    );
                }
                21 => {
                    f21 = Some(
                        ::mabo::buf::decode_array(r, |r| { ::mabo::buf::decode_u32(r) })?,
                    );
                }
                _ => ::mabo::buf::decode_skip(r, id.encoding)?,
            }
        }
        Ok(Self {
            f01: f01
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 1,
                    name: Some("f01"),
                })?,
            f02: f02
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 2,
                    name: Some("f02"),
                })?,
            f03: f03
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 3,
                    name: Some("f03"),
                })?,
            f04: f04
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 4,
                    name: Some("f04"),
                })?,
            f05: f05
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 5,
                    name: Some("f05"),
                })?,
            f06: f06
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 6,
                    name: Some("f06"),
                })?,
            f07: f07
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 7,
                    name: Some("f07"),
                })?,
            f08: f08
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 8,
                    name: Some("f08"),
                })?,
            f09: f09
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 9,
                    name: Some("f09"),
                })?,
            f10: f10
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 10,
                    name: Some("f10"),
                })?,
            f11: f11
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 11,
                    name: Some("f11"),
                })?,
            f12: f12
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 12,
                    name: Some("f12"),
                })?,
            f13: f13
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 13,
                    name: Some("f13"),
                })?,
            f14: f14
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 14,
                    name: Some("f14"),
                })?,
            f15: f15
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 15,
                    name: Some("f15"),
                })?,
            f16: f16
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 16,
                    name: Some("f16"),
                })?,
            f17: f17
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 17,
                    name: Some("f17"),
                })?,
            f18: f18
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 18,
                    name: Some("f18"),
                })?,
            f19: f19
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 19,
                    name: Some("f19"),
                })?,
            f20: f20
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 20,
                    name: Some("f20"),
                })?,
            f21: f21
                .ok_or(::mabo::buf::Error::MissingField {
                    id: 21,
                    name: Some("f21"),
                })?,
        })
    }
}
#[automatically_derived]
impl ::mabo::buf::Size for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        let Self {
            f01,
            f02,
            f03,
            f04,
            f05,
            f06,
            f07,
            f08,
            f09,
            f10,
            f11,
            f12,
            f13,
            f14,
            f15,
            f16,
            f17,
            f18,
            f19,
            f20,
            f21,
        } = self;
        ::mabo::buf::size_field(1, || { ::mabo::buf::size_bool(*f01) })
            + ::mabo::buf::size_field(2, || { ::mabo::buf::size_u8(*f02) })
            + ::mabo::buf::size_field(3, || { ::mabo::buf::size_u16(*f03) })
            + ::mabo::buf::size_field(4, || { ::mabo::buf::size_u32(*f04) })
            + ::mabo::buf::size_field(5, || { ::mabo::buf::size_u64(*f05) })
            + ::mabo::buf::size_field(6, || { ::mabo::buf::size_u128(*f06) })
            + ::mabo::buf::size_field(7, || { ::mabo::buf::size_i8(*f07) })
            + ::mabo::buf::size_field(8, || { ::mabo::buf::size_i16(*f08) })
            + ::mabo::buf::size_field(9, || { ::mabo::buf::size_i32(*f09) })
            + ::mabo::buf::size_field(10, || { ::mabo::buf::size_i64(*f10) })
            + ::mabo::buf::size_field(11, || { ::mabo::buf::size_i128(*f11) })
            + ::mabo::buf::size_field(12, || { ::mabo::buf::size_f32(*f12) })
            + ::mabo::buf::size_field(13, || { ::mabo::buf::size_f64(*f13) })
            + ::mabo::buf::size_field(14, || { ::mabo::buf::size_string(f14) })
            + ::mabo::buf::size_field(15, || { ::mabo::buf::size_string(f15) })
            + ::mabo::buf::size_field(16, || { ::mabo::buf::size_bytes_std(f16) })
            + ::mabo::buf::size_field(17, || { ::mabo::buf::size_bytes_std(f17) })
            + ::mabo::buf::size_field(18, || { ::mabo::buf::size_string(f18) })
            + ::mabo::buf::size_field(19, || { ::mabo::buf::size_bytes_std(f19) })
            + ::mabo::buf::size_field(
                20,
                || {
                    ::mabo::buf::size_u32(*&f20.0) + ::mabo::buf::size_u32(*&f20.1)
                        + ::mabo::buf::size_u32(*&f20.2)
                },
            )
            + ::mabo::buf::size_field(
                21,
                || { ::mabo::buf::size_array(f21, |v| { ::mabo::buf::size_u32(*v) }) },
            ) + ::mabo::buf::size_u32(::mabo::buf::END_MARKER)
    }
}

