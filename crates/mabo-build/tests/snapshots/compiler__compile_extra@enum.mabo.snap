---
source: crates/mabo-build/tests/compiler.rs
description: "/// Hello world!\nenum Sample {\n    Variant1 @1,\n    Variant2(u32 @1, u8 @2) @2,\n    Variant3 {\n        field1: string @1,\n        field2: vec<bool> @2,\n    } @3,\n}"
input_file: crates/mabo-build/tests/inputs_extra/enum.mabo
---
#[allow(unused_imports)]
use ::mabo::buf::{Decode, Encode, Size};
/// Hello world!
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub enum Sample {
    Variant1,
    Variant2(u32, u8),
    Variant3 { field1: String, field2: Vec<bool> },
}
#[automatically_derived]
impl ::mabo::Encode for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::semicolon_if_nothing_returned,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::mabo::BufMut) {
        match self {
            Self::Variant1 => {
                ::mabo::buf::encode_variant_id(w, ::mabo::VariantId::new(1));
            }
            Self::Variant2(n0, n1) => {
                ::mabo::buf::encode_variant_id(w, ::mabo::VariantId::new(2));
                ::mabo::buf::encode_field(
                    w,
                    ::mabo::FieldId::new(1, ::mabo::FieldEncoding::Varint),
                    |w| {
                        ::mabo::buf::encode_u32(w, *n0);
                    },
                );
                ::mabo::buf::encode_field(
                    w,
                    ::mabo::FieldId::new(2, ::mabo::FieldEncoding::Fixed1),
                    |w| {
                        ::mabo::buf::encode_u8(w, *n1);
                    },
                );
                ::mabo::buf::encode_u32(w, ::mabo::buf::END_MARKER);
            }
            Self::Variant3 { field1, field2 } => {
                ::mabo::buf::encode_variant_id(w, ::mabo::VariantId::new(3));
                ::mabo::buf::encode_field(
                    w,
                    ::mabo::FieldId::new(1, ::mabo::FieldEncoding::LengthPrefixed),
                    |w| {
                        ::mabo::buf::encode_string(w, field1);
                    },
                );
                ::mabo::buf::encode_field(
                    w,
                    ::mabo::FieldId::new(2, ::mabo::FieldEncoding::LengthPrefixed),
                    |w| {
                        ::mabo::buf::encode_vec(
                            w,
                            field2,
                            |v| { ::mabo::buf::size_bool(*v) },
                            |w, v| {
                                ::mabo::buf::encode_bool(w, *v);
                            },
                        );
                    },
                );
                ::mabo::buf::encode_u32(w, ::mabo::buf::END_MARKER);
            }
        }
    }
}
#[automatically_derived]
impl ::mabo::Decode for Sample {
    #[allow(clippy::too_many_lines)]
    fn decode(r: &mut impl ::mabo::Buf) -> ::mabo::buf::Result<Self> {
        match ::mabo::buf::decode_variant_id(r)?.value {
            1 => Ok(Self::Variant1),
            2 => {
                let mut n0: Option<u32> = None;
                let mut n1: Option<u8> = None;
                loop {
                    let id = ::mabo::buf::decode_id(r)?;
                    match id.value {
                        ::mabo::buf::END_MARKER => break,
                        1 => n0 = Some(::mabo::buf::decode_u32(r)?),
                        2 => n1 = Some(::mabo::buf::decode_u8(r)?),
                        _ => ::mabo::buf::decode_skip(r, id.encoding)?,
                    }
                }
                Ok(
                    Self::Variant2(
                        n0
                            .ok_or(::mabo::buf::Error::MissingField {
                                id: 1,
                                name: None,
                            })?,
                        n1
                            .ok_or(::mabo::buf::Error::MissingField {
                                id: 2,
                                name: None,
                            })?,
                    ),
                )
            }
            3 => {
                let mut field1: Option<String> = None;
                let mut field2: Option<Vec<bool>> = None;
                loop {
                    let id = ::mabo::buf::decode_id(r)?;
                    match id.value {
                        ::mabo::buf::END_MARKER => break,
                        1 => field1 = Some(::mabo::buf::decode_string(r)?),
                        2 => {
                            field2 = Some(
                                ::mabo::buf::decode_vec(
                                    r,
                                    |r| { ::mabo::buf::decode_bool(r) },
                                )?,
                            );
                        }
                        _ => ::mabo::buf::decode_skip(r, id.encoding)?,
                    }
                }
                Ok(Self::Variant3 {
                    field1: field1
                        .ok_or(::mabo::buf::Error::MissingField {
                            id: 1,
                            name: Some("field1"),
                        })?,
                    field2: field2
                        .ok_or(::mabo::buf::Error::MissingField {
                            id: 2,
                            name: Some("field2"),
                        })?,
                })
            }
            id => Err(::mabo::buf::Error::UnknownVariant(id)),
        }
    }
}
#[automatically_derived]
impl ::mabo::buf::Size for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::semicolon_if_nothing_returned,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        match self {
            Self::Variant1 => ::mabo::buf::size_variant_id(1),
            Self::Variant2(n0, n1) => {
                ::mabo::buf::size_variant_id(2)
                    + ::mabo::buf::size_field(1, || { ::mabo::buf::size_u32(*n0) })
                    + ::mabo::buf::size_field(2, || { ::mabo::buf::size_u8(*n1) })
                    + ::mabo::buf::END_MARKER_SIZE
            }
            Self::Variant3 { field1, field2 } => {
                ::mabo::buf::size_variant_id(3)
                    + ::mabo::buf::size_field(1, || { ::mabo::buf::size_string(field1) })
                    + ::mabo::buf::size_field(
                        2,
                        || {
                            ::mabo::buf::size_vec(
                                field2,
                                |v| { ::mabo::buf::size_bool(*v) },
                            )
                        },
                    ) + ::mabo::buf::END_MARKER_SIZE
            }
        }
    }
}
