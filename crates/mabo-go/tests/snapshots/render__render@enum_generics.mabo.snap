---
source: crates/mabo-go/tests/render.rs
description: "/// Enum with generics.\nenum Sample<A, B, C, D> {\n    One @1,\n    Two(A @1, B @2) @2,\n    Three {\n        field1: C @1,\n        field2: D @2,\n    } @3,\n}"
input_file: crates/mabo-parser/tests/inputs/enum_generics.mabo
---
--- sample.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

package sample

import (
	mabo "github.com/dnaka91/mabo-go"
	buf "github.com/dnaka91/mabo-go/buf"
)

type SampleVariant interface {
	 sealed()
}

// Enum with generics.
type Sample SampleVariant

type Sample_One struct{}

func (v Sample_One) sealed() {}

func NewSample_One() Sample_One {
	return Sample_One{}
}

var _ buf.Encode = (*Sample_One)(nil)

func (v *Sample_One) Encode(w []byte) []byte {
	return nil
}

var _ buf.Decode = (*Sample_One)(nil)

func (v *Sample_One) Decode(r []byte) ([]byte, error) {

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case buf.EndMarker:
				break
		}
	}


	return r, nil
}

var _ buf.Size = (*Sample_One)(nil)

func (v *Sample_One) Size() int {
	size := 0
	return size
}

type Sample_Two[A any, B any] struct {
	N0 A
	N1 B
}

func (v Sample_Two[A, B]) sealed() {}

func NewSample_Two[A any, B any](
	n0 A,
	n1 B,
) Sample_Two[A, B] {
	return Sample_Two[A, B]{
		N0: n0,
		N1: n1,
	}
}

var _ buf.Encode = (*Sample_Two[A, B])(nil)

func (v *Sample_Two[A, B]) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return v.N0.Encode(w)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return v.N1.Encode(w)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return nil
}

var _ buf.Decode = (*Sample_Two[A, B])(nil)

func (v *Sample_Two[A, B]) Decode(r []byte) ([]byte, error) {
	foundN0 := false
	foundN1 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := func(r []byte) ([]byte, A, error) {
					var value A
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.N0 = value
				foundN0 = true
			case 2:
				r2, value, err := func(r []byte) ([]byte, B, error) {
					var value B
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.N1 = value
				foundN1 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundN0 {
		return nil, buf.MissingFieldError{
			ID:    1,
			Field: "",
		}
	}
	if !foundN1 {
		return nil, buf.MissingFieldError{
			ID:    2,
			Field: "",
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample_Two[A, B])(nil)

func (v *Sample_Two[A, B]) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return v.N0.Size()
	})
	size += buf.SizeField(2, func() int {
		return v.N1.Size()
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}

type Sample_Three[C any, D any] struct {
	Field1 C
	Field2 D
}

func (v Sample_Three[C, D]) sealed() {}

func NewSample_Three[C any, D any](
	field1 C,
	field2 D,
) Sample_Three[C, D] {
	return Sample_Three[C, D]{
		Field1: field1,
		Field2: field2,
	}
}

var _ buf.Encode = (*Sample_Three[C, D])(nil)

func (v *Sample_Three[C, D]) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return v.Field1.Encode(w)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return v.Field2.Encode(w)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return nil
}

var _ buf.Decode = (*Sample_Three[C, D])(nil)

func (v *Sample_Three[C, D]) Decode(r []byte) ([]byte, error) {
	foundField1 := false
	foundField2 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := func(r []byte) ([]byte, C, error) {
					var value C
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.Field1 = value
				foundField1 = true
			case 2:
				r2, value, err := func(r []byte) ([]byte, D, error) {
					var value D
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.Field2 = value
				foundField2 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundField1 {
		return nil, buf.MissingFieldError{
			ID:    1,
			Field: "field1",
		}
	}
	if !foundField2 {
		return nil, buf.MissingFieldError{
			ID:    2,
			Field: "field2",
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample_Three[C, D])(nil)

func (v *Sample_Three[C, D]) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return v.Field1.Size()
	})
	size += buf.SizeField(2, func() int {
		return v.Field2.Size()
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}


