---
source: crates/mabo-go/tests/render.rs
description: "mod a {\n    /// Inner module\n    mod b {\n        enum Sample {\n            One @1,\n        }\n    }\n\n    struct Sample {\n        value: u32 @1,\n        inner: b::Sample @2,\n    }\n}"
input_file: crates/mabo-parser/tests/inputs/module_basic.mabo
---
--- sample.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

import (
	"github.com/dnaka91/mabo-go"
	"github.com/dnaka91/mabo-go/buf"
)

package sample

--- sample/a.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

package a

type Sample struct {
	Value uint32
	Inner b.Sample
}

func NewSample(
	value uint32,
	inner b.Sample,
) Sample {
	return Sample{
		Value: value,
		Inner: inner,
	}
}

var _ buf.Encode = (*Sample)(nil)

func (v *Sample) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Value)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return v.Inner.Encode(w)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*Sample)(nil)

func (v *Sample) Decode(r []byte) ([]byte, error) {
	foundValue := false
	foundInner := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Value = value
				foundValue = true
			case 2:
				r2, value, err := func(r []byte) ([]byte, b.Sample, error) {
					var value b.Sample
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.Inner = value
				foundInner = true
			case buf.EndMarker:
				break
		}
	}

	if !foundValue {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: "value"
		}
	}
	if !foundInner {
		return nil, buf.MissingFieldError{
			ID:    2
			Field: "inner"
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample)(nil)

func (v *Sample) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.Value)
	})
	size += buf.SizeField(2, func() int {
		return v.Inner.Size()
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}

--- sample/a/b.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

// Inner module
package b

type SampleVariant interface {
	 sealed()
}

type Sample SampleVariant

type Sample_One struct{}

func (v Sample_One) sealed() {}

func NewSample_One() Sample_One {
	return Sample_One{}
}

var _ buf.Encode = (*Sample_One)(nil)

func (v *Sample_One) Encode(w []byte) []byte {
	return nil
}

var _ buf.Decode = (*Sample_One)(nil)

func (v *Sample_One) Decode(r []byte) ([]byte, error) {

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case buf.EndMarker:
				break
		}
	}


	return r, nil
}

var _ buf.Size = (*Sample_One)(nil)

func (v *Sample_One) Size() int {
	size := 0
	return size
}


