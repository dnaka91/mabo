---
source: crates/mabo-go/tests/render.rs
description: "/// Basic struct.\nstruct Sample {\n    a: u32 @1,\n    /// Second field\n    b: bool @2,\n}"
input_file: crates/mabo-parser/tests/inputs/struct_basic.mabo
---
--- sample.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

package sample

import (
	mabo "github.com/dnaka91/mabo-go"
	buf "github.com/dnaka91/mabo-go/buf"
)

// Basic struct.
type Sample struct {
	A uint32
	// Second field
	B bool
}

func NewSample(
	a uint32,
	b bool,
) Sample {
	return Sample{
		A: a,
		B: b,
	}
}

var _ buf.Encode = (*Sample)(nil)

func (v *Sample) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.A)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeBool(w, v.B)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*Sample)(nil)

func (v *Sample) Decode(r []byte) ([]byte, error) {
	foundA := false
	foundB := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.A = value
				foundA = true
			case 2:
				r2, value, err := buf.DecodeBool(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.B = value
				foundB = true
			case buf.EndMarker:
				break
		}
	}

	if !foundA {
		return nil, buf.MissingFieldError{
			ID:    1,
			Field: "a",
		}
	}
	if !foundB {
		return nil, buf.MissingFieldError{
			ID:    2,
			Field: "b",
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample)(nil)

func (v *Sample) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.A)
	})
	size += buf.SizeField(2, func() int {
		return buf.SizeBool(v.B)
	})
	size += buf.EndMarkerSize
	return size
}
