---
source: crates/mabo-go/tests/render.rs
description: "/// Generic key-value pair.\nstruct KeyValue<K, V> {\n    key: K @1,\n    value: V @2,\n}"
input_file: crates/mabo-parser/tests/inputs/struct_generics.mabo
---
--- sample.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

package sample

import (
	mabo "github.com/dnaka91/mabo-go"
	buf "github.com/dnaka91/mabo-go/buf"
)

// Generic key-value pair.
type KeyValue[K any, V any] struct {
	Key K
	Value V
}

func NewKeyValue[K any, V any](
	key K,
	value V,
) KeyValue[K, V] {
	return KeyValue[K, V]{
		Key: key,
		Value: value,
	}
}

var _ buf.Encode = (*KeyValue[K, V])(nil)

func (v *KeyValue[K, V]) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return v.Key.Encode(w)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return v.Value.Encode(w)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*KeyValue[K, V])(nil)

func (v *KeyValue[K, V]) Decode(r []byte) ([]byte, error) {
	foundKey := false
	foundValue := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := func(r []byte) ([]byte, K, error) {
					var value K
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.Key = value
				foundKey = true
			case 2:
				r2, value, err := func(r []byte) ([]byte, V, error) {
					var value V
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.Value = value
				foundValue = true
			case buf.EndMarker:
				break
		}
	}

	if !foundKey {
		return nil, buf.MissingFieldError{
			ID:    1,
			Field: "key",
		}
	}
	if !foundValue {
		return nil, buf.MissingFieldError{
			ID:    2,
			Field: "value",
		}
	}

	return r, nil
}

var _ buf.Size = (*KeyValue[K, V])(nil)

func (v *KeyValue[K, V]) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return v.Key.Size()
	})
	size += buf.SizeField(2, func() int {
		return v.Value.Size()
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}


