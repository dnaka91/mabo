---
source: crates/mabo-go/tests/render.rs
description: "/// Some comment\n       struct      Sample<\n            T\n        >  {\n\n      a:    u32    @1,\n      b:    bool   @2,\n      c:    T      @3,\n    }"
input_file: crates/mabo-parser/tests/inputs/struct_many_ws.mabo
---
--- sample.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

package sample

import (
	mabo "github.com/dnaka91/mabo-go"
	buf "github.com/dnaka91/mabo-go/buf"
)

// Some comment
type Sample[T any] struct {
	A uint32
	B bool
	C T
}

func NewSample[T any](
	a uint32,
	b bool,
	c T,
) Sample[T] {
	return Sample[T]{
		A: a,
		B: b,
		C: c,
	}
}

var _ buf.Encode = (*Sample[T])(nil)

func (v *Sample[T]) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.A)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeBool(w, v.B)
	})
	w = buf.EncodeField(w, 3, func (w []byte) []byte {
		return v.C.Encode(w)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*Sample[T])(nil)

func (v *Sample[T]) Decode(r []byte) ([]byte, error) {
	foundA := false
	foundB := false
	foundC := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.A = value
				foundA = true
			case 2:
				r2, value, err := buf.DecodeBool(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.B = value
				foundB = true
			case 3:
				r2, value, err := func(r []byte) ([]byte, T, error) {
					var value T
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.C = value
				foundC = true
			case buf.EndMarker:
				break
		}
	}

	if !foundA {
		return nil, buf.MissingFieldError{
			ID:    1,
			Field: "a",
		}
	}
	if !foundB {
		return nil, buf.MissingFieldError{
			ID:    2,
			Field: "b",
		}
	}
	if !foundC {
		return nil, buf.MissingFieldError{
			ID:    3,
			Field: "c",
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample[T])(nil)

func (v *Sample[T]) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.A)
	})
	size += buf.SizeField(2, func() int {
		return buf.SizeBool(v.B)
	})
	size += buf.SizeField(3, func() int {
		return v.C.Size()
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}


