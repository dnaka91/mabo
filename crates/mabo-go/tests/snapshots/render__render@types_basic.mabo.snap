---
source: crates/mabo-go/tests/render.rs
description: "struct Sample {\n    f01: bool @1,\n    f02: u8 @2,\n    f03: u16 @3,\n    f04: u32 @4,\n    f05: u64 @5,\n    f06: u128 @6,\n    f07: i8 @7,\n    f08: i16 @8,\n    f09: i32 @9,\n    f10: i64 @10,\n    f11: i128 @11,\n    f12: f32 @12,\n    f13: f64 @13,\n    f14: string @14,\n    f15: &string @15,\n    f16: bytes @16,\n    f17: &bytes @17,\n    f18: box<string> @18,\n    f19: box<bytes> @19,\n    f20: (u32, u32, u32) @20,\n    f21: [u32; 12] @21,\n}"
input_file: crates/mabo-parser/tests/inputs/types_basic.mabo
---
--- sample.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

package sample

import (
	mabo "github.com/dnaka91/mabo-go"
	buf "github.com/dnaka91/mabo-go/buf"
)

type Sample struct {
	F01 bool
	F02 uint8
	F03 uint16
	F04 uint32
	F05 uint64
	F06 *big.Int
	F07 int8
	F08 int16
	F09 int32
	F10 int64
	F11 *big.Int
	F12 float32
	F13 float64
	F14 string
	F15 string
	F16 []byte
	F17 []byte
	F18 string
	F19 []byte
	F20 mabo.Tuple3[uint32, uint32, uint32]
	F21 [12]uint32
}

func NewSample(
	f01 bool,
	f02 uint8,
	f03 uint16,
	f04 uint32,
	f05 uint64,
	f06 *big.Int,
	f07 int8,
	f08 int16,
	f09 int32,
	f10 int64,
	f11 *big.Int,
	f12 float32,
	f13 float64,
	f14 string,
	f15 string,
	f16 []byte,
	f17 []byte,
	f18 string,
	f19 []byte,
	f20 mabo.Tuple3[uint32, uint32, uint32],
	f21 [12]uint32,
) Sample {
	return Sample{
		F01: f01,
		F02: f02,
		F03: f03,
		F04: f04,
		F05: f05,
		F06: f06,
		F07: f07,
		F08: f08,
		F09: f09,
		F10: f10,
		F11: f11,
		F12: f12,
		F13: f13,
		F14: f14,
		F15: f15,
		F16: f16,
		F17: f17,
		F18: f18,
		F19: f19,
		F20: f20,
		F21: f21,
	}
}

var _ buf.Encode = (*Sample)(nil)

func (v *Sample) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeBool(w, v.F01)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeU8(w, v.F02)
	})
	w = buf.EncodeField(w, 3, func (w []byte) []byte {
		return buf.EncodeU16(w, v.F03)
	})
	w = buf.EncodeField(w, 4, func (w []byte) []byte {
		return buf.EncodeU32(w, v.F04)
	})
	w = buf.EncodeField(w, 5, func (w []byte) []byte {
		return buf.EncodeU64(w, v.F05)
	})
	w = buf.EncodeField(w, 6, func (w []byte) []byte {
		return buf.EncodeU128(w, v.F06)
	})
	w = buf.EncodeField(w, 7, func (w []byte) []byte {
		return buf.EncodeI8(w, v.F07)
	})
	w = buf.EncodeField(w, 8, func (w []byte) []byte {
		return buf.EncodeI16(w, v.F08)
	})
	w = buf.EncodeField(w, 9, func (w []byte) []byte {
		return buf.EncodeI32(w, v.F09)
	})
	w = buf.EncodeField(w, 10, func (w []byte) []byte {
		return buf.EncodeI64(w, v.F10)
	})
	w = buf.EncodeField(w, 11, func (w []byte) []byte {
		return buf.EncodeI128(w, v.F11)
	})
	w = buf.EncodeField(w, 12, func (w []byte) []byte {
		return buf.EncodeF32(w, v.F12)
	})
	w = buf.EncodeField(w, 13, func (w []byte) []byte {
		return buf.EncodeF64(w, v.F13)
	})
	w = buf.EncodeField(w, 14, func (w []byte) []byte {
		return buf.EncodeString(w, v.F14)
	})
	w = buf.EncodeField(w, 15, func (w []byte) []byte {
		return buf.EncodeString(w, v.F15)
	})
	w = buf.EncodeField(w, 16, func (w []byte) []byte {
		return buf.EncodeBytes(w, v.F16)
	})
	w = buf.EncodeField(w, 17, func (w []byte) []byte {
		return buf.EncodeBytes(w, v.F17)
	})
	w = buf.EncodeField(w, 18, func (w []byte) []byte {
		return buf.EncodeString(w, v.F18)
	})
	w = buf.EncodeField(w, 19, func (w []byte) []byte {
		return buf.EncodeBytes(w, v.F19)
	})
	w = buf.EncodeField(w, 20, func (w []byte) []byte {
		return func (w []byte) []byte {
			w = buf.EncodeU32(w, v.F20.F0)
			w = buf.EncodeU32(w, v.F20.F1)
			w = buf.EncodeU32(w, v.F20.F2)
			return w
		}(w)
	})
	w = buf.EncodeField(w, 21, func (w []byte) []byte {
		return buf.EncodeArray12[uint32](w, v.F21, func(w []byte, v uint32) []byte {
			return buf.EncodeU32(w, v)
		})
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*Sample)(nil)

func (v *Sample) Decode(r []byte) ([]byte, error) {
	foundF01 := false
	foundF02 := false
	foundF03 := false
	foundF04 := false
	foundF05 := false
	foundF06 := false
	foundF07 := false
	foundF08 := false
	foundF09 := false
	foundF10 := false
	foundF11 := false
	foundF12 := false
	foundF13 := false
	foundF14 := false
	foundF15 := false
	foundF16 := false
	foundF17 := false
	foundF18 := false
	foundF19 := false
	foundF20 := false
	foundF21 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeBool(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F01 = value
				foundF01 = true
			case 2:
				r2, value, err := buf.DecodeU8(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F02 = value
				foundF02 = true
			case 3:
				r2, value, err := buf.DecodeU16(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F03 = value
				foundF03 = true
			case 4:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F04 = value
				foundF04 = true
			case 5:
				r2, value, err := buf.DecodeU64(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F05 = value
				foundF05 = true
			case 6:
				r2, value, err := buf.DecodeU128(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F06 = value
				foundF06 = true
			case 7:
				r2, value, err := buf.DecodeI8(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F07 = value
				foundF07 = true
			case 8:
				r2, value, err := buf.DecodeI16(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F08 = value
				foundF08 = true
			case 9:
				r2, value, err := buf.DecodeI32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F09 = value
				foundF09 = true
			case 10:
				r2, value, err := buf.DecodeI64(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F10 = value
				foundF10 = true
			case 11:
				r2, value, err := buf.DecodeI128(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F11 = value
				foundF11 = true
			case 12:
				r2, value, err := buf.DecodeF32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F12 = value
				foundF12 = true
			case 13:
				r2, value, err := buf.DecodeF64(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F13 = value
				foundF13 = true
			case 14:
				r2, value, err := buf.DecodeString(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F14 = value
				foundF14 = true
			case 15:
				r2, value, err := buf.DecodeString(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F15 = value
				foundF15 = true
			case 16:
				r2, value, err := buf.DecodeBytes(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F16 = value
				foundF16 = true
			case 17:
				r2, value, err := buf.DecodeBytes(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F17 = value
				foundF17 = true
			case 18:
				r2, value, err := buf.DecodeString(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F18 = value
				foundF18 = true
			case 19:
				r2, value, err := buf.DecodeBytes(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F19 = value
				foundF19 = true
			case 20:
				r2, value, err := func (r []byte) ([]byte, buf.Tuple3, error) {
					r2, value0, err := buf.DecodeU32(r)
					if err != nil {
						return nil, value, err
					}
					r = r2
					tuple.F0 = value0
					r2, value1, err := buf.DecodeU32(r)
					if err != nil {
						return nil, value, err
					}
					r = r2
					tuple.F1 = value1
					r2, value2, err := buf.DecodeU32(r)
					if err != nil {
						return nil, value, err
					}
					r = r2
					tuple.F2 = value2
					return r, tuple, nil
				}(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F20 = value
				foundF20 = true
			case 21:
				r2, value, err := buf.DecodeArray12[uint32](r, func(r []byte) ([]byte, uint32, error) {
					return buf.DecodeU32(r)
				})
				if err != nil {
					return nil, err
				}
				r = r2
				v.F21 = value
				foundF21 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundF01 {
		return nil, buf.MissingFieldError{
			ID:    1,
			Field: "f01",
		}
	}
	if !foundF02 {
		return nil, buf.MissingFieldError{
			ID:    2,
			Field: "f02",
		}
	}
	if !foundF03 {
		return nil, buf.MissingFieldError{
			ID:    3,
			Field: "f03",
		}
	}
	if !foundF04 {
		return nil, buf.MissingFieldError{
			ID:    4,
			Field: "f04",
		}
	}
	if !foundF05 {
		return nil, buf.MissingFieldError{
			ID:    5,
			Field: "f05",
		}
	}
	if !foundF06 {
		return nil, buf.MissingFieldError{
			ID:    6,
			Field: "f06",
		}
	}
	if !foundF07 {
		return nil, buf.MissingFieldError{
			ID:    7,
			Field: "f07",
		}
	}
	if !foundF08 {
		return nil, buf.MissingFieldError{
			ID:    8,
			Field: "f08",
		}
	}
	if !foundF09 {
		return nil, buf.MissingFieldError{
			ID:    9,
			Field: "f09",
		}
	}
	if !foundF10 {
		return nil, buf.MissingFieldError{
			ID:    10,
			Field: "f10",
		}
	}
	if !foundF11 {
		return nil, buf.MissingFieldError{
			ID:    11,
			Field: "f11",
		}
	}
	if !foundF12 {
		return nil, buf.MissingFieldError{
			ID:    12,
			Field: "f12",
		}
	}
	if !foundF13 {
		return nil, buf.MissingFieldError{
			ID:    13,
			Field: "f13",
		}
	}
	if !foundF14 {
		return nil, buf.MissingFieldError{
			ID:    14,
			Field: "f14",
		}
	}
	if !foundF15 {
		return nil, buf.MissingFieldError{
			ID:    15,
			Field: "f15",
		}
	}
	if !foundF16 {
		return nil, buf.MissingFieldError{
			ID:    16,
			Field: "f16",
		}
	}
	if !foundF17 {
		return nil, buf.MissingFieldError{
			ID:    17,
			Field: "f17",
		}
	}
	if !foundF18 {
		return nil, buf.MissingFieldError{
			ID:    18,
			Field: "f18",
		}
	}
	if !foundF19 {
		return nil, buf.MissingFieldError{
			ID:    19,
			Field: "f19",
		}
	}
	if !foundF20 {
		return nil, buf.MissingFieldError{
			ID:    20,
			Field: "f20",
		}
	}
	if !foundF21 {
		return nil, buf.MissingFieldError{
			ID:    21,
			Field: "f21",
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample)(nil)

func (v *Sample) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeBool(v.F01)
	})
	size += buf.SizeField(2, func() int {
		return buf.SizeU8(v.F02)
	})
	size += buf.SizeField(3, func() int {
		return buf.SizeU16(v.F03)
	})
	size += buf.SizeField(4, func() int {
		return buf.SizeU32(v.F04)
	})
	size += buf.SizeField(5, func() int {
		return buf.SizeU64(v.F05)
	})
	size += buf.SizeField(6, func() int {
		return buf.SizeU128(v.F06)
	})
	size += buf.SizeField(7, func() int {
		return buf.SizeI8(v.F07)
	})
	size += buf.SizeField(8, func() int {
		return buf.SizeI16(v.F08)
	})
	size += buf.SizeField(9, func() int {
		return buf.SizeI32(v.F09)
	})
	size += buf.SizeField(10, func() int {
		return buf.SizeI64(v.F10)
	})
	size += buf.SizeField(11, func() int {
		return buf.SizeI128(v.F11)
	})
	size += buf.SizeField(12, func() int {
		return buf.SizeF32(v.F12)
	})
	size += buf.SizeField(13, func() int {
		return buf.SizeF64(v.F13)
	})
	size += buf.SizeField(14, func() int {
		return buf.SizeString(v.F14)
	})
	size += buf.SizeField(15, func() int {
		return buf.SizeString(v.F15)
	})
	size += buf.SizeField(16, func() int {
		return buf.SizeBytes(v.F16)
	})
	size += buf.SizeField(17, func() int {
		return buf.SizeBytes(v.F17)
	})
	size += buf.SizeField(18, func() int {
		return buf.SizeString(v.F18)
	})
	size += buf.SizeField(19, func() int {
		return buf.SizeBytes(v.F19)
	})
	size += buf.SizeField(20, func() int {
		return func() int {
			size := 0
			size += buf.SizeU32(v.F20.F0)
			size += buf.SizeU32(v.F20.F1)
			size += buf.SizeU32(v.F20.F2)
			return size
		}(size)
	})
	size += buf.SizeField(21, func() int {
		return buf.SizeArray12[uint32](v.F21, func(v uint32) int {
			return buf.SizeU32(v)
		})
	})
	size += buf.EndMarkerSize
	return size
}
