---
source: crates/mabo-go/tests/render.rs
description: "struct Sample {\n    value: vec<option<non_zero<hash_map<i64, box<string>>>>> @1,\n}"
input_file: crates/mabo-parser/tests/inputs/types_nested.mabo
---
--- sample.go

// Code generated by mabo-go (v0.1.0). DO NOT EDIT.

package sample

import (
	mabo "github.com/dnaka91/mabo-go"
	buf "github.com/dnaka91/mabo-go/buf"
)

type Sample struct {
	Value []*mabo.NonZeroHashMap[int64, string]
}

func NewSample(
	value []*mabo.NonZeroHashMap[int64, string],
) Sample {
	return Sample{
		Value: value,
	}
}

var _ buf.Encode = (*Sample)(nil)

func (v *Sample) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeVec[*mabo.NonZeroHashMap[int64, string]](w, v.Value, func(w []byte, v *mabo.NonZeroHashMap[int64, string]) []byte {
			return buf.EncodeOption[mabo.NonZeroHashMap[int64, string]](w, v, func(w []byte, v mabo.NonZeroHashMap[int64, string]) []byte {
				return buf.EncodeHashMap[int64, string](
					w, v.Get(),
					func(w []byte, k int64) []byte {
						return buf.EncodeI64(w, k)
					},
					func(w []byte, v string) []byte {
						return buf.EncodeString(w, v)
					},
				)
			})
		})
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*Sample)(nil)

func (v *Sample) Decode(r []byte) ([]byte, error) {
	foundValue := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeVec[*mabo.NonZeroHashMap[int64, string]](r, func(r []byte) ([]byte, *mabo.NonZeroHashMap[int64, string], error) {
					return buf.DecodeOption[mabo.NonZeroHashMap[int64, string]](r, func(r []byte) ([]byte, mabo.NonZeroHashMap[int64, string], error) {
						return buf.DecodeNonZeroHashMap[int64, string](
							r,
							func(r []byte) ([]byte, int64, error) {
								return buf.DecodeI64(r)
							},
							func(r []byte) ([]byte, string, error) {
								return buf.DecodeString(r)
							},
						)
					})
				})
				if err != nil {
					return nil, err
				}
				r = r2
				v.Value = value
				foundValue = true
			case buf.EndMarker:
				break
		}
	}

	if !foundValue {
		return nil, buf.MissingFieldError{
			ID:    1,
			Field: "value",
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample)(nil)

func (v *Sample) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeVec[*mabo.NonZeroHashMap[int64, string]](v.Value, func(v *mabo.NonZeroHashMap[int64, string]) int {
			return buf.SizeOption[mabo.NonZeroHashMap[int64, string]](v, func(v mabo.NonZeroHashMap[int64, string]) int {
				return buf.SizeHashMap[int64, string](
					v.Get(),
					func(k int64) int {
						return buf.SizeI64(k)
					},
					func(v string) int {
						return buf.SizeString(v)
					},
				)
			})
		})
	})
	size += buf.EndMarkerSize
	return size
}
