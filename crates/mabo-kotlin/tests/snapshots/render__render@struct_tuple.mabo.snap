---
source: crates/mabo-kotlin/tests/render.rs
description: "/// Basic struct.\nstruct Sample(u32 @1, bool @2)"
input_file: crates/mabo-parser/tests/inputs/struct_tuple.mabo
---
--- sample.kt

package sample

import java.math.BigInteger
import java.nio.ByteBuffer
import kotlin.UByte
import kotlin.UShort
import kotlin.UInt
import kotlin.ULong

import rocks.dnaka91.mabo.*
import rocks.dnaka91.mabo.buf.*

/**
 * Basic struct.
 */
public data class Sample(
    val n0: UInt,
    val n1: Boolean,
) : Encode, Size {
    override fun encode(w: ByteBuffer) {
        Encoder.encodeField(w, 1) { w -> Encoder.encodeU32(w, this.n0) }
        Encoder.encodeField(w, 2) { w -> Encoder.encodeBool(w, this.n1) }
        Encoder.encodeU32(w, END_MARKER)
    }

    override fun size(): Int = 0 +
        Sizer.sizeField(1) { Sizer.sizeU32(this.N0) } +
        Sizer.sizeField(2) { Sizer.sizeBool(this.N1) } +
        Sizer.sizeFieldId(END_MARKER)

    companion object : Decode<Sample> {
        override fun decode(r ByteBuffer): Result<Sample> = runCatching {
            var n0: UInt? = null
            var n1: Boolean? = null

            while (true) {
                val id = Decoder.decodeFieldId(r).getOrThrow()
                when (id.value) {
                    1u -> n0 = Decoder.decodeU32(r).getOrThrow()
                    2u -> n1 = Decoder.decodeBool(r).getOrThrow()
                    END_MARKER -> break
                }
            }

            Sample(
                n0 ?: throw MissingFieldException(1u, null),
                n1 ?: throw MissingFieldException(2u, null),
            )
        }
    }
}


