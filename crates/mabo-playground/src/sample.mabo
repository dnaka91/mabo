/// Basic struct.
struct Sample {
    a: u32 @1,
    /// Second field
    b: bool @2,
    c: (String, i16) @3,
}

enum Sample2 {
    Unit @1,
    Tuple(u32 @1, u32 @2) @2,
    Fields {
        name: String @1,
        valid: bool @2,
        dates: Vec<(u16, u8, u8)> @3,
    } @3,
}

/// A tuple struct.
struct Sample3(bool @1, (Bytes, i64) @2)

const CHRISTMAS_MONTH: u8 = 12;
const CHRISTMAS_DAY: u8 = 24;

/// Data structures with generics.
mod gens {
    /// Using generics
    struct SampleGen<T> {
        raw: Bytes @1,
        array: [T; 4] @2,
        value: T @3,
    }

    enum SampleGen2<T> {
        Value(T @1) @1,
    }

    struct Nested<A, B> {
        one: A @1,
        two: SampleGen<B> @2,
    }
}

/// Alias for another type.
type SampleAlias = Sample;

mod specials {
    struct SomeOptions {
        maybe_int: Option<u32> @1,
        maybe_text: Option<String> @2,
        maybe_tuple: Option<(u8, u8)> @3,
        nested: Option<Option<u8>> @4,
        vec_maybe: Vec<Option<bool>> @5,
    }
}
