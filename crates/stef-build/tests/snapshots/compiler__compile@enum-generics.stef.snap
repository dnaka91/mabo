---
source: crates/stef-build/tests/compiler.rs
expression: "/// Enum with generics.\nenum Sample<A, B, C, D> {\n    One @1,\n    Two(A @1, B @2) @2,\n    Three {\n        field1: C @1,\n        field2: D @2,\n    } @3,\n}"
input_file: crates/stef-parser/tests/inputs/enum-generics.stef
---
/// Enum with generics.
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub enum Sample<A, B, C, D> {
    One,
    Two(A, B),
    Three { field1: C, field2: D },
}
#[automatically_derived]
impl<A, B, C, D> ::stef::Encode for Sample<A, B, C, D>
where
    A: ::stef::buf::Encode,
    B: ::stef::buf::Encode,
    C: ::stef::buf::Encode,
    D: ::stef::buf::Encode,
{
    #[allow(clippy::borrow_deref_ref)]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        match self {
            Self::One => {
                ::stef::buf::encode_id(w, 1);
            }
            Self::Two(n0, n1) => {
                ::stef::buf::encode_id(w, 2);
                ::stef::buf::encode_field(w, 1, |w| { (*n0).encode(w) });
                ::stef::buf::encode_field(w, 2, |w| { (*n1).encode(w) });
                ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
            }
            Self::Three { field1, field2 } => {
                ::stef::buf::encode_id(w, 3);
                ::stef::buf::encode_field(w, 1, |w| { (*field1).encode(w) });
                ::stef::buf::encode_field(w, 2, |w| { (*field2).encode(w) });
                ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
            }
        }
    }
}
#[automatically_derived]
impl<A, B, C, D> ::stef::Decode for Sample<A, B, C, D>
where
    A: ::std::fmt::Debug + ::stef::buf::Decode,
    B: ::std::fmt::Debug + ::stef::buf::Decode,
    C: ::std::fmt::Debug + ::stef::buf::Decode,
    D: ::std::fmt::Debug + ::stef::buf::Decode,
{
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        match ::stef::buf::decode_id(r)? {
            1 => Ok(Self::One),
            2 => {
                let mut n0: Option<A> = None;
                let mut n1: Option<B> = None;
                loop {
                    match ::stef::buf::decode_id(r)? {
                        ::stef::buf::END_MARKER => break,
                        1 => n0 = Some(A::decode(r)?),
                        2 => n1 = Some(B::decode(r)?),
                        _ => continue,
                    }
                }
                Ok(
                    Self::Two(
                        n0
                            .ok_or(::stef::buf::Error::MissingField {
                                id: 1,
                                name: None,
                            })?,
                        n1
                            .ok_or(::stef::buf::Error::MissingField {
                                id: 2,
                                name: None,
                            })?,
                    ),
                )
            }
            3 => {
                let mut field1: Option<C> = None;
                let mut field2: Option<D> = None;
                loop {
                    match ::stef::buf::decode_id(r)? {
                        ::stef::buf::END_MARKER => break,
                        1 => field1 = Some(C::decode(r)?),
                        2 => field2 = Some(D::decode(r)?),
                        _ => continue,
                    }
                }
                Ok(Self::Three {
                    field1: field1
                        .ok_or(::stef::buf::Error::MissingField {
                            id: 1,
                            name: Some("field1"),
                        })?,
                    field2: field2
                        .ok_or(::stef::buf::Error::MissingField {
                            id: 2,
                            name: Some("field2"),
                        })?,
                })
            }
            id => Err(::stef::buf::Error::UnknownVariant(id)),
        }
    }
}

