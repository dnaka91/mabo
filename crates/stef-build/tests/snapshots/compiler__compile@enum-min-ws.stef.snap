---
source: crates/stef-build/tests/compiler.rs
expression: "enum Sample<T>{One@1,Two(u32@1,u64@2,T@3)@2,Three{field1:u32@1,field2:bool@2,field3:T@3}@3}"
input_file: crates/stef-parser/tests/inputs/enum-min-ws.stef
---
pub enum Sample<T> {
    One,
    Two(u32, u64, T),
    Three { field1: u32, field2: bool, field3: T },
}
impl<T> ::stef::Encode for Sample<T>
where
    T: ::stef::buf::Encode,
{
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        match self {
            Self::One => {
                ::stef::buf::encode_id(w, 1);
            }
            Self::Two(n0, n1, n2) => {
                ::stef::buf::encode_id(w, 2);
                ::stef::buf::encode_field(w, 1, |w| { ::stef::buf::encode_u32(w, n0) });
                ::stef::buf::encode_field(w, 2, |w| { ::stef::buf::encode_u64(w, n1) });
                ::stef::buf::encode_field(w, 3, |w| { n2.encode(w) });
            }
            Self::Three { field1, field2, field3 } => {
                ::stef::buf::encode_id(w, 3);
                ::stef::buf::encode_field(
                    w,
                    1,
                    |w| { ::stef::buf::encode_u32(w, field1) },
                );
                ::stef::buf::encode_field(
                    w,
                    2,
                    |w| { ::stef::buf::encode_bool(w, field2) },
                );
                ::stef::buf::encode_field(w, 3, |w| { field3.encode(w) });
            }
        }
    }
}
impl<T> ::stef::Decode for Sample<T>
where
    T: ::stef::buf::Decode,
{
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        match ::stef::buf::decode_id(r)? {
            1 => {
                loop {
                    match ::stef::buf::decode_id(r)? {
                        ::stef::buf::END_MARKER => break,
                        _ => continue,
                    }
                }
                Ok(Self::One)
            }
            2 => {
                let mut n0: Option<u32> = None;
                let mut n1: Option<u64> = None;
                let mut n2: Option<T> = None;
                loop {
                    match ::stef::buf::decode_id(r)? {
                        ::stef::buf::END_MARKER => break,
                        1 => n0 = Some(::stef::buf::decode_u32(r)?),
                        2 => n1 = Some(::stef::buf::decode_u64(r)?),
                        3 => n2 = Some(T::decode(r)?),
                        _ => continue,
                    }
                }
                Ok(
                    Self::Two(
                        n0
                            .unwrap_or_else(|| ::stef::buf::Error::MissingField {
                                id: 1,
                                name: None,
                            }),
                        n1
                            .unwrap_or_else(|| ::stef::buf::Error::MissingField {
                                id: 2,
                                name: None,
                            }),
                        n2
                            .unwrap_or_else(|| ::stef::buf::Error::MissingField {
                                id: 3,
                                name: None,
                            }),
                    ),
                )
            }
            3 => {
                let mut field1: Option<u32> = None;
                let mut field2: Option<bool> = None;
                let mut field3: Option<T> = None;
                loop {
                    match ::stef::buf::decode_id(r)? {
                        ::stef::buf::END_MARKER => break,
                        1 => field1 = Some(::stef::buf::decode_u32(r)?),
                        2 => field2 = Some(::stef::buf::decode_bool(r)?),
                        3 => field3 = Some(T::decode(r)?),
                        _ => continue,
                    }
                }
                Ok(Self::Three {
                    field1: field1
                        .unwrap_or_else(|| ::stef::buf::Error::MissingField {
                            id: 1,
                            name: Some("field1"),
                        }),
                    field2: field2
                        .unwrap_or_else(|| ::stef::buf::Error::MissingField {
                            id: 2,
                            name: Some("field2"),
                        }),
                    field3: field3
                        .unwrap_or_else(|| ::stef::buf::Error::MissingField {
                            id: 3,
                            name: Some("field3"),
                        }),
                })
            }
            id => Err(Error::UnknownVariant(id)),
        }
    }
}

