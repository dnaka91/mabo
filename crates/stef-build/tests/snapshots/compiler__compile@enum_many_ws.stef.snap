---
source: crates/stef-build/tests/compiler.rs
description: "/// Sample enum.\n enum     Sample    {\n\n       One      @1,\n\n       Two  (   u32   @1,     u64     @2)    @2,\n\n            Three     {\n\n                    field1:    u32      @1,\n\n                    field2:    bool     @2,\n\n            }    @3,\n\n }"
input_file: crates/stef-parser/tests/inputs/enum_many_ws.stef
---
#[allow(unused_imports)]
use ::stef::buf::{Decode, Encode};
/// Sample enum.
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub enum Sample {
    One,
    Two(u32, u64),
    Three { field1: u32, field2: bool },
}
#[automatically_derived]
impl ::stef::Encode for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::semicolon_if_nothing_returned,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        match self {
            Self::One => {
                ::stef::buf::encode_id(w, 1);
            }
            Self::Two(n0, n1) => {
                ::stef::buf::encode_id(w, 2);
                ::stef::buf::encode_field(w, 1, |w| { ::stef::buf::encode_u32(w, *n0) });
                ::stef::buf::encode_field(w, 2, |w| { ::stef::buf::encode_u64(w, *n1) });
                ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
            }
            Self::Three { field1, field2 } => {
                ::stef::buf::encode_id(w, 3);
                ::stef::buf::encode_field(
                    w,
                    1,
                    |w| { ::stef::buf::encode_u32(w, *field1) },
                );
                ::stef::buf::encode_field(
                    w,
                    2,
                    |w| { ::stef::buf::encode_bool(w, *field2) },
                );
                ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
            }
        }
    }
}
#[automatically_derived]
impl ::stef::Decode for Sample {
    #[allow(clippy::too_many_lines)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        match ::stef::buf::decode_id(r)? {
            1 => Ok(Self::One),
            2 => {
                let mut n0: Option<u32> = None;
                let mut n1: Option<u64> = None;
                loop {
                    match ::stef::buf::decode_id(r)? {
                        ::stef::buf::END_MARKER => break,
                        1 => n0 = Some(::stef::buf::decode_u32(r)?),
                        2 => n1 = Some(::stef::buf::decode_u64(r)?),
                        _ => continue,
                    }
                }
                Ok(
                    Self::Two(
                        n0
                            .ok_or(::stef::buf::Error::MissingField {
                                id: 1,
                                name: None,
                            })?,
                        n1
                            .ok_or(::stef::buf::Error::MissingField {
                                id: 2,
                                name: None,
                            })?,
                    ),
                )
            }
            3 => {
                let mut field1: Option<u32> = None;
                let mut field2: Option<bool> = None;
                loop {
                    match ::stef::buf::decode_id(r)? {
                        ::stef::buf::END_MARKER => break,
                        1 => field1 = Some(::stef::buf::decode_u32(r)?),
                        2 => field2 = Some(::stef::buf::decode_bool(r)?),
                        _ => continue,
                    }
                }
                Ok(Self::Three {
                    field1: field1
                        .ok_or(::stef::buf::Error::MissingField {
                            id: 1,
                            name: Some("field1"),
                        })?,
                    field2: field2
                        .ok_or(::stef::buf::Error::MissingField {
                            id: 2,
                            name: Some("field2"),
                        })?,
                })
            }
            id => Err(::stef::buf::Error::UnknownVariant(id)),
        }
    }
}

