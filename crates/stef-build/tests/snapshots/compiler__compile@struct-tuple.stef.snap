---
source: crates/stef-build/tests/compiler.rs
expression: "/// Basic struct.\nstruct Sample(u32 @1, bool @2)"
input_file: crates/stef-parser/tests/inputs/struct-tuple.stef
---
#[allow(unused_imports)]
use ::stef::buf::{Decode, Encode};
/// Basic struct.
#[derive(Clone, Debug, PartialEq)]
pub struct Sample(u32, bool);
#[automatically_derived]
impl ::stef::Encode for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        ::stef::buf::encode_field(w, 1, |w| { ::stef::buf::encode_u32(w, self.0) });
        ::stef::buf::encode_field(w, 2, |w| { ::stef::buf::encode_bool(w, self.1) });
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::stef::Decode for Sample {
    #[allow(clippy::type_complexity)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut n0: Option<u32> = None;
        let mut n1: Option<bool> = None;
        loop {
            match ::stef::buf::decode_id(r)? {
                ::stef::buf::END_MARKER => break,
                1 => n0 = Some(::stef::buf::decode_u32(r)?),
                2 => n1 = Some(::stef::buf::decode_bool(r)?),
                _ => continue,
            }
        }
        Ok(
            Self(
                n0
                    .ok_or(::stef::buf::Error::MissingField {
                        id: 1,
                        name: None,
                    })?,
                n1
                    .ok_or(::stef::buf::Error::MissingField {
                        id: 2,
                        name: None,
                    })?,
            ),
        )
    }
}

