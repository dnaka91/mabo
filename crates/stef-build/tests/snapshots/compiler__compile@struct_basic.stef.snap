---
source: crates/stef-build/tests/compiler.rs
description: "/// Basic struct.\nstruct Sample {\n    a: u32 @1,\n    /// Second field\n    b: bool @2,\n}"
input_file: crates/stef-parser/tests/inputs/struct_basic.stef
---
#[allow(unused_imports)]
use ::stef::buf::{Decode, Encode, Size};
/// Basic struct.
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct Sample {
    pub a: u32,
    /// Second field
    pub b: bool,
}
#[automatically_derived]
impl ::stef::Encode for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        ::stef::buf::encode_field(
            w,
            1,
            |w| {
                ::stef::buf::encode_u32(w, self.a);
            },
        );
        ::stef::buf::encode_field(
            w,
            2,
            |w| {
                ::stef::buf::encode_bool(w, self.b);
            },
        );
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::stef::Decode for Sample {
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut a: Option<u32> = None;
        let mut b: Option<bool> = None;
        loop {
            match ::stef::buf::decode_id(r)? {
                ::stef::buf::END_MARKER => break,
                1 => a = Some(::stef::buf::decode_u32(r)?),
                2 => b = Some(::stef::buf::decode_bool(r)?),
                _ => continue,
            }
        }
        Ok(Self {
            a: a
                .ok_or(::stef::buf::Error::MissingField {
                    id: 1,
                    name: Some("a"),
                })?,
            b: b
                .ok_or(::stef::buf::Error::MissingField {
                    id: 2,
                    name: Some("b"),
                })?,
        })
    }
}
#[automatically_derived]
impl ::stef::buf::Size for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        ::stef::buf::size_field(1, || { ::stef::buf::size_u32(self.a) })
            + ::stef::buf::size_field(2, || { ::stef::buf::size_bool(self.b) })
            + ::stef::buf::size_u32(::stef::buf::END_MARKER)
    }
}

