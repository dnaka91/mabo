---
source: crates/stef-build/tests/compiler.rs
description: "struct Sample<T>{a:u32@1,b:bool@2,c:T@3}"
input_file: crates/stef-parser/tests/inputs/struct_min_ws.stef
---
#[allow(unused_imports)]
use ::stef::buf::{Decode, Encode, Size};
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct Sample<T> {
    pub a: u32,
    pub b: bool,
    pub c: T,
}
#[automatically_derived]
impl<T> ::stef::Encode for Sample<T>
where
    T: ::stef::buf::Encode + ::stef::buf::Size,
{
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        let Self { a, b, c } = self;
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(1, ::stef::FieldEncoding::Varint),
            |w| {
                ::stef::buf::encode_u32(w, *a);
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(2, ::stef::FieldEncoding::Fixed1),
            |w| {
                ::stef::buf::encode_bool(w, *b);
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(3, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                c.encode(w);
            },
        );
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl<T> ::stef::Decode for Sample<T>
where
    T: ::std::fmt::Debug + ::stef::buf::Decode,
{
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut a: Option<u32> = None;
        let mut b: Option<bool> = None;
        let mut c: Option<T> = None;
        loop {
            let id = ::stef::buf::decode_id(r)?;
            match id.value {
                ::stef::buf::END_MARKER => break,
                1 => a = Some(::stef::buf::decode_u32(r)?),
                2 => b = Some(::stef::buf::decode_bool(r)?),
                3 => c = Some(T::decode(r)?),
                _ => ::stef::buf::decode_skip(r, id.encoding)?,
            }
        }
        Ok(Self {
            a: a
                .ok_or(::stef::buf::Error::MissingField {
                    id: 1,
                    name: Some("a"),
                })?,
            b: b
                .ok_or(::stef::buf::Error::MissingField {
                    id: 2,
                    name: Some("b"),
                })?,
            c: c
                .ok_or(::stef::buf::Error::MissingField {
                    id: 3,
                    name: Some("c"),
                })?,
        })
    }
}
#[automatically_derived]
impl<T> ::stef::buf::Size for Sample<T>
where
    T: ::stef::buf::Size,
{
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        let Self { a, b, c } = self;
        ::stef::buf::size_field(1, || { ::stef::buf::size_u32(*a) })
            + ::stef::buf::size_field(2, || { ::stef::buf::size_bool(*b) })
            + ::stef::buf::size_field(3, || { c.size() })
            + ::stef::buf::size_u32(::stef::buf::END_MARKER)
    }
}

