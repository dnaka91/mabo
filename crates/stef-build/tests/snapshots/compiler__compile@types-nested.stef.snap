---
source: crates/stef-build/tests/compiler.rs
expression: "struct Sample {\n    value: vec<option<non_zero<hash_map<i64, box<string>>>>> @1,\n}"
input_file: crates/stef-parser/tests/inputs/types-nested.stef
---
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub struct Sample {
    pub value: Vec<Option<HashMap<i64, Box<str>>>>,
}
#[automatically_derived]
impl ::stef::Encode for Sample {
    #[allow(clippy::needless_borrow)]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        ::stef::buf::encode_field(
            w,
            1,
            |w| {
                ::stef::buf::encode_vec(
                    w,
                    &self.value,
                    |w, v| {
                        ::stef::buf::encode_option(
                            w,
                            &v,
                            |w, v| {
                                (v).encode(w);
                            },
                        );
                    },
                );
            },
        );
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::stef::Decode for Sample {
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut value: Option<Vec<Option<HashMap<i64, Box<str>>>>> = None;
        loop {
            match ::stef::buf::decode_id(r)? {
                ::stef::buf::END_MARKER => break,
                1 => {
                    value = Some(
                        ::stef::buf::decode_vec(
                            r,
                            |r| { ::stef::buf::decode_option(r, |r| { todo!() }) },
                        )?,
                    );
                }
                _ => continue,
            }
        }
        Ok(Self {
            value: value
                .ok_or(::stef::buf::Error::MissingField {
                    id: 1,
                    name: Some("value"),
                })?,
        })
    }
}

