---
source: crates/stef-build/tests/compiler.rs
expression: "struct Sample {\n    basic: Test123 @1,\n    with_generics: KeyValue<u32, bool> @2,\n}"
input_file: crates/stef-parser/tests/inputs/types-ref.stef
---
#[derive(Clone, Debug, PartialEq, PartialOrd)]
pub struct Sample {
    pub basic: Test123,
    pub with_generics: KeyValue<u32, bool>,
}
#[automatically_derived]
impl ::stef::Encode for Sample {
    #[allow(clippy::needless_borrow)]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        ::stef::buf::encode_field(
            w,
            1,
            |w| {
                (self.basic).encode(w);
            },
        );
        ::stef::buf::encode_field(
            w,
            2,
            |w| {
                (self.with_generics).encode(w);
            },
        );
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::stef::Decode for Sample {
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut basic: Option<Test123> = None;
        let mut with_generics: Option<KeyValue<u32, bool>> = None;
        loop {
            match ::stef::buf::decode_id(r)? {
                ::stef::buf::END_MARKER => break,
                1 => basic = Some(Test123::decode(r)?),
                2 => with_generics = Some(KeyValue::decode(r)?),
                _ => continue,
            }
        }
        Ok(Self {
            basic: basic
                .ok_or(::stef::buf::Error::MissingField {
                    id: 1,
                    name: Some("basic"),
                })?,
            with_generics: with_generics
                .ok_or(::stef::buf::Error::MissingField {
                    id: 2,
                    name: Some("with_generics"),
                })?,
        })
    }
}

