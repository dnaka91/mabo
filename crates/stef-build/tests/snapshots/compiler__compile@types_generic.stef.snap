---
source: crates/stef-build/tests/compiler.rs
description: "struct Sample {\n    f1: vec<u32> @1,\n    f2: hash_map<u32, string> @2,\n    f3: hash_set<u32> @3,\n    f4: option<u32> @4,\n    f5: non_zero<u32> @5,\n}\n\nstruct SampleUnnamed(\n    vec<u32> @1,\n    hash_map<u32, string> @2,\n    hash_set<u32> @3,\n    option<u32> @4,\n    non_zero<u32> @5,\n)"
input_file: crates/stef-parser/tests/inputs/types_generic.stef
---
#[allow(unused_imports)]
use ::stef::buf::{Decode, Encode, Size};
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct Sample {
    pub f1: Vec<u32>,
    pub f2: ::std::collections::HashMap<u32, String>,
    pub f3: ::std::collections::HashSet<u32>,
    pub f4: Option<u32>,
    pub f5: ::std::num::NonZeroU32,
}
#[automatically_derived]
impl ::stef::Encode for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        let Self { f1, f2, f3, f4, f5 } = self;
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(1, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                ::stef::buf::encode_vec(
                    w,
                    f1,
                    |v| { ::stef::buf::size_u32(*v) },
                    |w, v| {
                        ::stef::buf::encode_u32(w, *v);
                    },
                );
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(2, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                ::stef::buf::encode_hash_map(
                    w,
                    f2,
                    |k| { ::stef::buf::size_u32(*k) },
                    |v| { ::stef::buf::size_string(v) },
                    |w, k| {
                        ::stef::buf::encode_u32(w, *k);
                    },
                    |w, v| {
                        ::stef::buf::encode_string(w, v);
                    },
                );
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(3, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                ::stef::buf::encode_hash_set(
                    w,
                    f3,
                    |v| { ::stef::buf::size_u32(*v) },
                    |w, v| {
                        ::stef::buf::encode_u32(w, *v);
                    },
                );
            },
        );
        ::stef::buf::encode_field_option(
            w,
            ::stef::FieldId::new(4, ::stef::FieldEncoding::Varint),
            f4,
            |w, v| {
                ::stef::buf::encode_u32(w, *v);
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(5, ::stef::FieldEncoding::Varint),
            |w| {
                ::stef::buf::encode_u32(w, f5.get());
            },
        );
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::stef::Decode for Sample {
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut f1: Option<Vec<u32>> = None;
        let mut f2: Option<::std::collections::HashMap<u32, String>> = None;
        let mut f3: Option<::std::collections::HashSet<u32>> = None;
        let mut f4: Option<u32> = None;
        let mut f5: Option<::std::num::NonZeroU32> = None;
        loop {
            let id = ::stef::buf::decode_id(r)?;
            match id.value {
                ::stef::buf::END_MARKER => break,
                1 => {
                    f1 = Some(
                        ::stef::buf::decode_vec(r, |r| { ::stef::buf::decode_u32(r) })?,
                    );
                }
                2 => {
                    f2 = Some(
                        ::stef::buf::decode_hash_map(
                            r,
                            |r| { ::stef::buf::decode_u32(r) },
                            |r| { ::stef::buf::decode_string(r) },
                        )?,
                    );
                }
                3 => {
                    f3 = Some(
                        ::stef::buf::decode_hash_set(
                            r,
                            |r| { ::stef::buf::decode_u32(r) },
                        )?,
                    );
                }
                4 => f4 = Some(::stef::buf::decode_u32(r)?),
                5 => f5 = Some(::stef::buf::decode_non_zero_u32(r)?),
                _ => ::stef::buf::decode_skip(r, id.encoding)?,
            }
        }
        Ok(Self {
            f1: f1
                .ok_or(::stef::buf::Error::MissingField {
                    id: 1,
                    name: Some("f1"),
                })?,
            f2: f2
                .ok_or(::stef::buf::Error::MissingField {
                    id: 2,
                    name: Some("f2"),
                })?,
            f3: f3
                .ok_or(::stef::buf::Error::MissingField {
                    id: 3,
                    name: Some("f3"),
                })?,
            f4,
            f5: f5
                .ok_or(::stef::buf::Error::MissingField {
                    id: 5,
                    name: Some("f5"),
                })?,
        })
    }
}
#[automatically_derived]
impl ::stef::buf::Size for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        let Self { f1, f2, f3, f4, f5 } = self;
        ::stef::buf::size_field(
            1,
            || { ::stef::buf::size_vec(f1, |v| { ::stef::buf::size_u32(*v) }) },
        )
            + ::stef::buf::size_field(
                2,
                || {
                    ::stef::buf::size_hash_map(
                        f2,
                        |k| { ::stef::buf::size_u32(*k) },
                        |v| { ::stef::buf::size_string(v) },
                    )
                },
            )
            + ::stef::buf::size_field(
                3,
                || { ::stef::buf::size_hash_set(f3, |v| { ::stef::buf::size_u32(*v) }) },
            )
            + ::stef::buf::size_field_option(
                4,
                f4.as_ref(),
                |v| { ::stef::buf::size_u32(*v) },
            ) + ::stef::buf::size_field(5, || { ::stef::buf::size_u32(f5.get()) })
            + ::stef::buf::size_u32(::stef::buf::END_MARKER)
    }
}
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct SampleUnnamed(
    pub Vec<u32>,
    pub ::std::collections::HashMap<u32, String>,
    pub ::std::collections::HashSet<u32>,
    pub Option<u32>,
    pub ::std::num::NonZeroU32,
);
#[automatically_derived]
impl ::stef::Encode for SampleUnnamed {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        let Self(n0, n1, n2, n3, n4) = self;
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(1, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                ::stef::buf::encode_vec(
                    w,
                    n0,
                    |v| { ::stef::buf::size_u32(*v) },
                    |w, v| {
                        ::stef::buf::encode_u32(w, *v);
                    },
                );
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(2, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                ::stef::buf::encode_hash_map(
                    w,
                    n1,
                    |k| { ::stef::buf::size_u32(*k) },
                    |v| { ::stef::buf::size_string(v) },
                    |w, k| {
                        ::stef::buf::encode_u32(w, *k);
                    },
                    |w, v| {
                        ::stef::buf::encode_string(w, v);
                    },
                );
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(3, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                ::stef::buf::encode_hash_set(
                    w,
                    n2,
                    |v| { ::stef::buf::size_u32(*v) },
                    |w, v| {
                        ::stef::buf::encode_u32(w, *v);
                    },
                );
            },
        );
        ::stef::buf::encode_field_option(
            w,
            ::stef::FieldId::new(4, ::stef::FieldEncoding::Varint),
            n3,
            |w, v| {
                ::stef::buf::encode_u32(w, *v);
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(5, ::stef::FieldEncoding::Varint),
            |w| {
                ::stef::buf::encode_u32(w, n4.get());
            },
        );
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::stef::Decode for SampleUnnamed {
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut n0: Option<Vec<u32>> = None;
        let mut n1: Option<::std::collections::HashMap<u32, String>> = None;
        let mut n2: Option<::std::collections::HashSet<u32>> = None;
        let mut n3: Option<u32> = None;
        let mut n4: Option<::std::num::NonZeroU32> = None;
        loop {
            let id = ::stef::buf::decode_id(r)?;
            match id.value {
                ::stef::buf::END_MARKER => break,
                1 => {
                    n0 = Some(
                        ::stef::buf::decode_vec(r, |r| { ::stef::buf::decode_u32(r) })?,
                    );
                }
                2 => {
                    n1 = Some(
                        ::stef::buf::decode_hash_map(
                            r,
                            |r| { ::stef::buf::decode_u32(r) },
                            |r| { ::stef::buf::decode_string(r) },
                        )?,
                    );
                }
                3 => {
                    n2 = Some(
                        ::stef::buf::decode_hash_set(
                            r,
                            |r| { ::stef::buf::decode_u32(r) },
                        )?,
                    );
                }
                4 => n3 = Some(::stef::buf::decode_u32(r)?),
                5 => n4 = Some(::stef::buf::decode_non_zero_u32(r)?),
                _ => ::stef::buf::decode_skip(r, id.encoding)?,
            }
        }
        Ok(
            Self(
                n0
                    .ok_or(::stef::buf::Error::MissingField {
                        id: 1,
                        name: None,
                    })?,
                n1
                    .ok_or(::stef::buf::Error::MissingField {
                        id: 2,
                        name: None,
                    })?,
                n2
                    .ok_or(::stef::buf::Error::MissingField {
                        id: 3,
                        name: None,
                    })?,
                n3,
                n4
                    .ok_or(::stef::buf::Error::MissingField {
                        id: 5,
                        name: None,
                    })?,
            ),
        )
    }
}
#[automatically_derived]
impl ::stef::buf::Size for SampleUnnamed {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        let Self(n0, n1, n2, n3, n4) = self;
        ::stef::buf::size_field(
            1,
            || { ::stef::buf::size_vec(n0, |v| { ::stef::buf::size_u32(*v) }) },
        )
            + ::stef::buf::size_field(
                2,
                || {
                    ::stef::buf::size_hash_map(
                        n1,
                        |k| { ::stef::buf::size_u32(*k) },
                        |v| { ::stef::buf::size_string(v) },
                    )
                },
            )
            + ::stef::buf::size_field(
                3,
                || { ::stef::buf::size_hash_set(n2, |v| { ::stef::buf::size_u32(*v) }) },
            )
            + ::stef::buf::size_field_option(
                4,
                n3.as_ref(),
                |v| { ::stef::buf::size_u32(*v) },
            ) + ::stef::buf::size_field(5, || { ::stef::buf::size_u32(n4.get()) })
            + ::stef::buf::size_u32(::stef::buf::END_MARKER)
    }
}

