---
source: crates/stef-build/tests/compiler.rs
description: "struct Sample {\n    basic: Test123 @1,\n    with_generics: KeyValue<u32, bool> @2,\n}\n\nenum Test123 {\n    Value @1,\n}\n\nstruct KeyValue<K, V> {\n    key: K @1,\n    value: V @2,\n}"
input_file: crates/stef-parser/tests/inputs/types_ref.stef
---
#[allow(unused_imports)]
use ::stef::buf::{Decode, Encode, Size};
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct Sample {
    pub basic: Test123,
    pub with_generics: KeyValue<u32, bool>,
}
#[automatically_derived]
impl ::stef::Encode for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        let Self { basic, with_generics } = self;
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(1, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                basic.encode(w);
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(2, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                with_generics.encode(w);
            },
        );
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl ::stef::Decode for Sample {
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut basic: Option<Test123> = None;
        let mut with_generics: Option<KeyValue<u32, bool>> = None;
        loop {
            let id = ::stef::buf::decode_id(r)?;
            match id.value {
                ::stef::buf::END_MARKER => break,
                1 => basic = Some(Test123::decode(r)?),
                2 => with_generics = Some(KeyValue::<u32, bool>::decode(r)?),
                _ => ::stef::buf::decode_skip(r, id.encoding)?,
            }
        }
        Ok(Self {
            basic: basic
                .ok_or(::stef::buf::Error::MissingField {
                    id: 1,
                    name: Some("basic"),
                })?,
            with_generics: with_generics
                .ok_or(::stef::buf::Error::MissingField {
                    id: 2,
                    name: Some("with_generics"),
                })?,
        })
    }
}
#[automatically_derived]
impl ::stef::buf::Size for Sample {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        let Self { basic, with_generics } = self;
        ::stef::buf::size_field(1, || { basic.size() })
            + ::stef::buf::size_field(2, || { with_generics.size() })
            + ::stef::buf::size_u32(::stef::buf::END_MARKER)
    }
}
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub enum Test123 {
    Value,
}
#[automatically_derived]
impl ::stef::Encode for Test123 {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::semicolon_if_nothing_returned,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        match self {
            Self::Value => {
                ::stef::buf::encode_variant_id(w, ::stef::VariantId::new(1));
            }
        }
    }
}
#[automatically_derived]
impl ::stef::Decode for Test123 {
    #[allow(clippy::too_many_lines)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        match ::stef::buf::decode_variant_id(r)?.value {
            1 => Ok(Self::Value),
            id => Err(::stef::buf::Error::UnknownVariant(id)),
        }
    }
}
#[automatically_derived]
impl ::stef::buf::Size for Test123 {
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::semicolon_if_nothing_returned,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        match self {
            Self::Value => ::stef::buf::size_id(1),
        }
    }
}
#[derive(Clone, Debug, PartialEq)]
#[allow(clippy::module_name_repetitions, clippy::option_option)]
pub struct KeyValue<K, V> {
    pub key: K,
    pub value: V,
}
#[automatically_derived]
impl<K, V> ::stef::Encode for KeyValue<K, V>
where
    K: ::stef::buf::Encode + ::stef::buf::Size,
    V: ::stef::buf::Encode + ::stef::buf::Size,
{
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        let Self { key, value } = self;
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(1, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                key.encode(w);
            },
        );
        ::stef::buf::encode_field(
            w,
            ::stef::FieldId::new(2, ::stef::FieldEncoding::LengthPrefixed),
            |w| {
                value.encode(w);
            },
        );
        ::stef::buf::encode_u32(w, ::stef::buf::END_MARKER);
    }
}
#[automatically_derived]
impl<K, V> ::stef::Decode for KeyValue<K, V>
where
    K: ::std::fmt::Debug + ::stef::buf::Decode,
    V: ::std::fmt::Debug + ::stef::buf::Decode,
{
    #[allow(clippy::type_complexity, clippy::too_many_lines)]
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut key: Option<K> = None;
        let mut value: Option<V> = None;
        loop {
            let id = ::stef::buf::decode_id(r)?;
            match id.value {
                ::stef::buf::END_MARKER => break,
                1 => key = Some(K::decode(r)?),
                2 => value = Some(V::decode(r)?),
                _ => ::stef::buf::decode_skip(r, id.encoding)?,
            }
        }
        Ok(Self {
            key: key
                .ok_or(::stef::buf::Error::MissingField {
                    id: 1,
                    name: Some("key"),
                })?,
            value: value
                .ok_or(::stef::buf::Error::MissingField {
                    id: 2,
                    name: Some("value"),
                })?,
        })
    }
}
#[automatically_derived]
impl<K, V> ::stef::buf::Size for KeyValue<K, V>
where
    K: ::stef::buf::Size,
    V: ::stef::buf::Size,
{
    #[allow(
        clippy::borrow_deref_ref,
        clippy::deref_addrof,
        clippy::explicit_auto_deref,
        clippy::needless_borrow,
        clippy::too_many_lines,
    )]
    fn size(&self) -> usize {
        let Self { key, value } = self;
        ::stef::buf::size_field(1, || { key.size() })
            + ::stef::buf::size_field(2, || { value.size() })
            + ::stef::buf::size_u32(::stef::buf::END_MARKER)
    }
}

