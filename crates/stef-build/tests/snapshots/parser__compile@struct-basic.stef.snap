---
source: crates/stef-build/tests/parser.rs
expression: "/// Basic struct.\nstruct Sample {\n    a: u32 @1,\n    /// Second field\n    b: bool @2,\n}"
input_file: crates/stef-parser/tests/inputs/struct-basic.stef
---
/// Basic struct.
pub struct Sample {
    pub a: u32,
    /// Second field
    pub b: bool,
}
impl ::stef::Encode for Sample {
    fn encode(&self, w: &mut impl ::stef::BufMut) {
        ::stef::buf::encode_field(w, 1, |w| { ::stef::buf::encode_u32(w, self.a) });
        ::stef::buf::encode_field(w, 2, |w| { ::stef::buf::encode_bool(w, self.b) });
    }
}
impl ::stef::Decode for Sample {
    fn decode(r: &mut impl ::stef::Buf) -> ::stef::buf::Result<Self> {
        let mut a: Option<u32> = None;
        let mut b: Option<bool> = None;
        loop {
            match ::stef::buf::decode_id(r)? {
                ::stef::buf::END_MARKER => break,
                1 => a = Some(::stef::buf::decode_u32(r)?),
                2 => b = Some(::stef::buf::decode_bool(r)?),
                _ => continue,
            }
        }
        Ok(Self {
            a: a
                .unwrap_or_else(|| ::stef::buf::Error::MissingField {
                    id: 1,
                    name: Some("a"),
                }),
            b: b
                .unwrap_or_else(|| ::stef::buf::Error::MissingField {
                    id: 2,
                    name: Some("b"),
                }),
        })
    }
}

