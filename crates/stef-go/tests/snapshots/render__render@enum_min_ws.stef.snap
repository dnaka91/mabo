---
source: crates/stef-go/tests/render.rs
description: "enum Sample<T>{One@1,Two(u32@1,u64@2,T@3)@2,Three{field1:u32@1,field2:bool@2,field3:T@3}@3}"
input_file: crates/stef-parser/tests/inputs/enum_min_ws.stef
---
--- sample.go

// Code generated by stef-go (v0.1.0). DO NOT EDIT.

import (
	"github.com/dnaka91/stef-go"
	"github.com/dnaka91/stef-go/buf"
)

package sample

type SampleVariant interface {
	 sealed()
}

type Sample SampleVariant

type Sample_One struct{}

func (v Sample_One) sealed() {}

func NewSample_One() Sample_One {
	return Sample_One{}
}

var _ buf.Encode = (*Sample_One)(nil)

func (v *Sample_One) Encode(w []byte) []byte {
	return nil
}

var _ buf.Decode = (*Sample_One)(nil)

func (v *Sample_One) Decode(r []byte) ([]byte, error) {

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case buf.EndMarker:
				break
		}
	}


	return r, nil
}

var _ buf.Size = (*Sample_One)(nil)

func (v *Sample_One) Size() int {
	size := 0
	return size
}

type Sample_Two[T any] struct {
	N0 uint32
	N1 uint64
	N2 T
}

func (v Sample_Two[T]) sealed() {}

func NewSample_Two[T any](
	n0 uint32,
	n1 uint64,
	n2 T,
) Sample_Two[T] {
	return Sample_Two[T]{
		N0: n0,
		N1: n1,
		N2: n2,
	}
}

var _ buf.Encode = (*Sample_Two[T])(nil)

func (v *Sample_Two[T]) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.N0)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeU64(w, v.N1)
	})
	w = buf.EncodeField(w, 3, func (w []byte) []byte {
		return v.N2.Encode(w)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return nil
}

var _ buf.Decode = (*Sample_Two[T])(nil)

func (v *Sample_Two[T]) Decode(r []byte) ([]byte, error) {
	foundN0 := false
	foundN1 := false
	foundN2 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.N0 = value
				foundN0 = true
			case 2:
				r2, value, err := buf.DecodeU64(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.N1 = value
				foundN1 = true
			case 3:
				r2, value, err := func(r []byte) ([]byte, T, error) {
					var value T
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.N2 = value
				foundN2 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundN0 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: ""
		}
	}
	if !foundN1 {
		return nil, buf.MissingFieldError{
			ID:    2
			Field: ""
		}
	}
	if !foundN2 {
		return nil, buf.MissingFieldError{
			ID:    3
			Field: ""
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample_Two[T])(nil)

func (v *Sample_Two[T]) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.N0)
	})
	size += buf.SizeField(2, func() int {
		return buf.SizeU64(v.N1)
	})
	size += buf.SizeField(3, func() int {
		return v.N2.Size()
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}

type Sample_Three[T any] struct {
	Field1 uint32
	Field2 bool
	Field3 T
}

func (v Sample_Three[T]) sealed() {}

func NewSample_Three[T any](
	field1 uint32,
	field2 bool,
	field3 T,
) Sample_Three[T] {
	return Sample_Three[T]{
		Field1: field1,
		Field2: field2,
		Field3: field3,
	}
}

var _ buf.Encode = (*Sample_Three[T])(nil)

func (v *Sample_Three[T]) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Field1)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeBool(w, v.Field2)
	})
	w = buf.EncodeField(w, 3, func (w []byte) []byte {
		return v.Field3.Encode(w)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return nil
}

var _ buf.Decode = (*Sample_Three[T])(nil)

func (v *Sample_Three[T]) Decode(r []byte) ([]byte, error) {
	foundField1 := false
	foundField2 := false
	foundField3 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field1 = value
				foundField1 = true
			case 2:
				r2, value, err := buf.DecodeBool(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field2 = value
				foundField2 = true
			case 3:
				r2, value, err := func(r []byte) ([]byte, T, error) {
					var value T
					return value.Decode(r)
				}(r)

				if err != nil {
					return nil, err
				}
				r = r2
				v.Field3 = value
				foundField3 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundField1 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: "field1"
		}
	}
	if !foundField2 {
		return nil, buf.MissingFieldError{
			ID:    2
			Field: "field2"
		}
	}
	if !foundField3 {
		return nil, buf.MissingFieldError{
			ID:    3
			Field: "field3"
		}
	}

	return r, nil
}

var _ buf.Size = (*Sample_Three[T])(nil)

func (v *Sample_Three[T]) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.Field1)
	})
	size += buf.SizeField(2, func() int {
		return buf.SizeBool(v.Field2)
	})
	size += buf.SizeField(3, func() int {
		return v.Field3.Size()
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}


