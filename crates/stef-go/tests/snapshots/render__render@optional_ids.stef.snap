---
source: crates/stef-go/tests/render.rs
description: "struct SampleNamed {\n    field1: u32,\n    field2: u32 @100,\n    field3: u32,\n}\n\nstruct SampleUnnamed(u32, u32 @100, u32)\n\nenum SampleEnum {\n    Named {\n        field1: u32,\n        field2: u32 @100,\n        field3: u32,\n    },\n    Unit @50,\n    Unnamed(u32, u32 @100, u32),\n}"
input_file: crates/stef-parser/tests/inputs/optional_ids.stef
---
--- sample.go

// Code generated by stef-go (v0.1.0). DO NOT EDIT.

import (
	"github.com/dnaka91/stef-go"
	"github.com/dnaka91/stef-go/buf"
)

package sample

type SampleNamed struct {
	Field1 uint32
	Field2 uint32
	Field3 uint32
}

func NewSampleNamed(
	field1 uint32,
	field2 uint32,
	field3 uint32,
) SampleNamed {
	return SampleNamed{
		Field1: field1,
		Field2: field2,
		Field3: field3,
	}
}

var _ buf.Encode = (*SampleNamed)(nil)

func (v *SampleNamed) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Field1)
	})
	w = buf.EncodeField(w, 100, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Field2)
	})
	w = buf.EncodeField(w, 101, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Field3)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*SampleNamed)(nil)

func (v *SampleNamed) Decode(r []byte) ([]byte, error) {
	foundField1 := false
	foundField2 := false
	foundField3 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field1 = value
				foundField1 = true
			case 100:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field2 = value
				foundField2 = true
			case 101:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field3 = value
				foundField3 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundField1 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: "field1"
		}
	}
	if !foundField2 {
		return nil, buf.MissingFieldError{
			ID:    100
			Field: "field2"
		}
	}
	if !foundField3 {
		return nil, buf.MissingFieldError{
			ID:    101
			Field: "field3"
		}
	}

	return r, nil
}

var _ buf.Size = (*SampleNamed)(nil)

func (v *SampleNamed) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.Field1)
	})
	size += buf.SizeField(100, func() int {
		return buf.SizeU32(v.Field2)
	})
	size += buf.SizeField(101, func() int {
		return buf.SizeU32(v.Field3)
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}

type SampleUnnamed struct {
	N0 uint32
	N1 uint32
	N2 uint32
}

func NewSampleUnnamed(
	n0 uint32,
	n1 uint32,
	n2 uint32,
) SampleUnnamed {
	return SampleUnnamed{
		N0: n0,
		N1: n1,
		N2: n2,
	}
}

var _ buf.Encode = (*SampleUnnamed)(nil)

func (v *SampleUnnamed) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.N0)
	})
	w = buf.EncodeField(w, 100, func (w []byte) []byte {
		return buf.EncodeU32(w, v.N1)
	})
	w = buf.EncodeField(w, 101, func (w []byte) []byte {
		return buf.EncodeU32(w, v.N2)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*SampleUnnamed)(nil)

func (v *SampleUnnamed) Decode(r []byte) ([]byte, error) {
	foundN0 := false
	foundN1 := false
	foundN2 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.N0 = value
				foundN0 = true
			case 100:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.N1 = value
				foundN1 = true
			case 101:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.N2 = value
				foundN2 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundN0 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: ""
		}
	}
	if !foundN1 {
		return nil, buf.MissingFieldError{
			ID:    100
			Field: ""
		}
	}
	if !foundN2 {
		return nil, buf.MissingFieldError{
			ID:    101
			Field: ""
		}
	}

	return r, nil
}

var _ buf.Size = (*SampleUnnamed)(nil)

func (v *SampleUnnamed) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.N0)
	})
	size += buf.SizeField(100, func() int {
		return buf.SizeU32(v.N1)
	})
	size += buf.SizeField(101, func() int {
		return buf.SizeU32(v.N2)
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}

type SampleEnumVariant interface {
	 sealed()
}

type SampleEnum SampleEnumVariant

type SampleEnum_Named struct {
	Field1 uint32
	Field2 uint32
	Field3 uint32
}

func (v SampleEnum_Named) sealed() {}

func NewSampleEnum_Named(
	field1 uint32,
	field2 uint32,
	field3 uint32,
) SampleEnum_Named {
	return SampleEnum_Named{
		Field1: field1,
		Field2: field2,
		Field3: field3,
	}
}

var _ buf.Encode = (*SampleEnum_Named)(nil)

func (v *SampleEnum_Named) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Field1)
	})
	w = buf.EncodeField(w, 100, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Field2)
	})
	w = buf.EncodeField(w, 101, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Field3)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return nil
}

var _ buf.Decode = (*SampleEnum_Named)(nil)

func (v *SampleEnum_Named) Decode(r []byte) ([]byte, error) {
	foundField1 := false
	foundField2 := false
	foundField3 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field1 = value
				foundField1 = true
			case 100:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field2 = value
				foundField2 = true
			case 101:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field3 = value
				foundField3 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundField1 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: "field1"
		}
	}
	if !foundField2 {
		return nil, buf.MissingFieldError{
			ID:    100
			Field: "field2"
		}
	}
	if !foundField3 {
		return nil, buf.MissingFieldError{
			ID:    101
			Field: "field3"
		}
	}

	return r, nil
}

var _ buf.Size = (*SampleEnum_Named)(nil)

func (v *SampleEnum_Named) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.Field1)
	})
	size += buf.SizeField(100, func() int {
		return buf.SizeU32(v.Field2)
	})
	size += buf.SizeField(101, func() int {
		return buf.SizeU32(v.Field3)
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}

type SampleEnum_Unit struct{}

func (v SampleEnum_Unit) sealed() {}

func NewSampleEnum_Unit() SampleEnum_Unit {
	return SampleEnum_Unit{}
}

var _ buf.Encode = (*SampleEnum_Unit)(nil)

func (v *SampleEnum_Unit) Encode(w []byte) []byte {
	return nil
}

var _ buf.Decode = (*SampleEnum_Unit)(nil)

func (v *SampleEnum_Unit) Decode(r []byte) ([]byte, error) {

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case buf.EndMarker:
				break
		}
	}


	return r, nil
}

var _ buf.Size = (*SampleEnum_Unit)(nil)

func (v *SampleEnum_Unit) Size() int {
	size := 0
	return size
}

type SampleEnum_Unnamed struct {
	N0 uint32
	N1 uint32
	N2 uint32
}

func (v SampleEnum_Unnamed) sealed() {}

func NewSampleEnum_Unnamed(
	n0 uint32,
	n1 uint32,
	n2 uint32,
) SampleEnum_Unnamed {
	return SampleEnum_Unnamed{
		N0: n0,
		N1: n1,
		N2: n2,
	}
}

var _ buf.Encode = (*SampleEnum_Unnamed)(nil)

func (v *SampleEnum_Unnamed) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.N0)
	})
	w = buf.EncodeField(w, 100, func (w []byte) []byte {
		return buf.EncodeU32(w, v.N1)
	})
	w = buf.EncodeField(w, 101, func (w []byte) []byte {
		return buf.EncodeU32(w, v.N2)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return nil
}

var _ buf.Decode = (*SampleEnum_Unnamed)(nil)

func (v *SampleEnum_Unnamed) Decode(r []byte) ([]byte, error) {
	foundN0 := false
	foundN1 := false
	foundN2 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.N0 = value
				foundN0 = true
			case 100:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.N1 = value
				foundN1 = true
			case 101:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.N2 = value
				foundN2 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundN0 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: ""
		}
	}
	if !foundN1 {
		return nil, buf.MissingFieldError{
			ID:    100
			Field: ""
		}
	}
	if !foundN2 {
		return nil, buf.MissingFieldError{
			ID:    101
			Field: ""
		}
	}

	return r, nil
}

var _ buf.Size = (*SampleEnum_Unnamed)(nil)

func (v *SampleEnum_Unnamed) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.N0)
	})
	size += buf.SizeField(100, func() int {
		return buf.SizeU32(v.N1)
	})
	size += buf.SizeField(101, func() int {
		return buf.SizeU32(v.N2)
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}


