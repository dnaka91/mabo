---
source: crates/stef-go/tests/render.rs
description: "/// Basic struct.\nstruct SampleStruct {\n    a: u32 @1,\n    b: bool @2,\n}\n\n/// Sample enum.\nenum SampleEnum {\n    One @1,\n    Two(u32 @1, u64 @2) @2,\n    Three {\n        field1: u32 @1,\n        field2: bool @2,\n    } @3,\n}"
input_file: crates/stef-parser/tests/inputs/schema_basic.stef
---
--- sample.go

// Code generated by stef-go (v0.1.0). DO NOT EDIT.

import (
	"github.com/dnaka91/stef-go"
	"github.com/dnaka91/stef-go/buf"
)

package sample

// Basic struct.
type SampleStruct struct {
	A uint32
	B bool
}

func NewSampleStruct(
	a uint32,
	b bool,
) SampleStruct {
	return SampleStruct{
		A: a,
		B: b,
	}
}

var _ buf.Encode = (*SampleStruct)(nil)

func (v *SampleStruct) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.A)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeBool(w, v.B)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*SampleStruct)(nil)

func (v *SampleStruct) Decode(r []byte) ([]byte, error) {
	foundA := false
	foundB := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.A = value
				foundA = true
			case 2:
				r2, value, err := buf.DecodeBool(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.B = value
				foundB = true
			case buf.EndMarker:
				break
		}
	}

	if !foundA {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: "a"
		}
	}
	if !foundB {
		return nil, buf.MissingFieldError{
			ID:    2
			Field: "b"
		}
	}

	return r, nil
}

var _ buf.Size = (*SampleStruct)(nil)

func (v *SampleStruct) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.A)
	})
	size += buf.SizeField(2, func() int {
		return buf.SizeBool(v.B)
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}

type SampleEnumVariant interface {
	 sealed()
}

// Sample enum.
type SampleEnum SampleEnumVariant

type SampleEnum_One struct{}

func (v SampleEnum_One) sealed() {}

func NewSampleEnum_One() SampleEnum_One {
	return SampleEnum_One{}
}

var _ buf.Encode = (*SampleEnum_One)(nil)

func (v *SampleEnum_One) Encode(w []byte) []byte {
	return nil
}

var _ buf.Decode = (*SampleEnum_One)(nil)

func (v *SampleEnum_One) Decode(r []byte) ([]byte, error) {

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case buf.EndMarker:
				break
		}
	}


	return r, nil
}

var _ buf.Size = (*SampleEnum_One)(nil)

func (v *SampleEnum_One) Size() int {
	size := 0
	return size
}

type SampleEnum_Two struct {
	F0 uint32
	F1 uint64
}

func (v SampleEnum_Two) sealed() {}

func NewSampleEnum_Two(
	f0 uint32,
	f1 uint64,
) SampleEnum_Two {
	return SampleEnum_Two{
		F0: f0,
		F1: f1,
	}
}

var _ buf.Encode = (*SampleEnum_Two)(nil)

func (v *SampleEnum_Two) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.F0)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeU64(w, v.F1)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return nil
}

var _ buf.Decode = (*SampleEnum_Two)(nil)

func (v *SampleEnum_Two) Decode(r []byte) ([]byte, error) {
	foundF0 := false
	foundF1 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F0 = value
				foundF0 = true
			case 2:
				r2, value, err := buf.DecodeU64(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F1 = value
				foundF1 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundF0 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: ""
		}
	}
	if !foundF1 {
		return nil, buf.MissingFieldError{
			ID:    2
			Field: ""
		}
	}

	return r, nil
}

var _ buf.Size = (*SampleEnum_Two)(nil)

func (v *SampleEnum_Two) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.F0)
	})
	size += buf.SizeField(2, func() int {
		return buf.SizeU64(v.F1)
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}

type SampleEnum_Three struct {
	Field1 uint32
	Field2 bool
}

func (v SampleEnum_Three) sealed() {}

func NewSampleEnum_Three(
	field1 uint32,
	field2 bool,
) SampleEnum_Three {
	return SampleEnum_Three{
		Field1: field1,
		Field2: field2,
	}
}

var _ buf.Encode = (*SampleEnum_Three)(nil)

func (v *SampleEnum_Three) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU32(w, v.Field1)
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeBool(w, v.Field2)
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return nil
}

var _ buf.Decode = (*SampleEnum_Three)(nil)

func (v *SampleEnum_Three) Decode(r []byte) ([]byte, error) {
	foundField1 := false
	foundField2 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field1 = value
				foundField1 = true
			case 2:
				r2, value, err := buf.DecodeBool(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.Field2 = value
				foundField2 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundField1 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: "field1"
		}
	}
	if !foundField2 {
		return nil, buf.MissingFieldError{
			ID:    2
			Field: "field2"
		}
	}

	return r, nil
}

var _ buf.Size = (*SampleEnum_Three)(nil)

func (v *SampleEnum_Three) Size() int {
	size := 0
	size += buf.SizeField(1, func() int {
		return buf.SizeU32(v.Field1)
	})
	size += buf.SizeField(2, func() int {
		return buf.SizeBool(v.Field2)
	})
	size += buf.SizeU32(buf.EndMarker)
	return size
}


