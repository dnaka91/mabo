---
source: crates/stef-go/tests/render.rs
description: "struct Sample {\n    f01: non_zero<u8> @1,\n    f02: non_zero<u16> @2,\n    f03: non_zero<u32> @3,\n    f04: non_zero<u64> @4,\n    f05: non_zero<u128> @5,\n    f06: non_zero<i8> @6,\n    f07: non_zero<i16> @7,\n    f08: non_zero<i32> @8,\n    f09: non_zero<i64> @9,\n    f10: non_zero<i128> @10,\n    f11: non_zero<string> @11,\n    f12: non_zero<bytes> @12,\n    f13: non_zero<vec<string>> @13,\n    f14: non_zero<hash_map<string, bytes>> @14,\n    f15: non_zero<hash_set<string>> @15,\n}"
input_file: crates/stef-parser/tests/inputs/types_non_zero.stef
---
--- sample.go

// Code generated by stef-go (v0.1.0). DO NOT EDIT.

import (
	"github.com/dnaka91/stef-go"
	"github.com/dnaka91/stef-go/buf"
)

package sample

type Sample struct {
	F01 stef.NonZeroU8
	F02 stef.NonZeroU16
	F03 stef.NonZeroU32
	F04 stef.NonZeroU64
	F05 stef.NonZeroU128
	F06 stef.NonZeroI8
	F07 stef.NonZeroI16
	F08 stef.NonZeroI32
	F09 stef.NonZeroI64
	F10 stef.NonZeroI128
	F11 stef.NonZeroString
	F12 stef.NonZeroBytes
	F13 stef.NonZeroVec[string]
	F14 stef.NonZeroHashMap[string, []byte]
	F15 stef.NonZeroHashSet[string]
}

func NewSample(
	f01 stef.NonZeroU8,
	f02 stef.NonZeroU16,
	f03 stef.NonZeroU32,
	f04 stef.NonZeroU64,
	f05 stef.NonZeroU128,
	f06 stef.NonZeroI8,
	f07 stef.NonZeroI16,
	f08 stef.NonZeroI32,
	f09 stef.NonZeroI64,
	f10 stef.NonZeroI128,
	f11 stef.NonZeroString,
	f12 stef.NonZeroBytes,
	f13 stef.NonZeroVec[string],
	f14 stef.NonZeroHashMap[string, []byte],
	f15 stef.NonZeroHashSet[string],
) Sample {
	return Sample{
		F01: f01,
		F02: f02,
		F03: f03,
		F04: f04,
		F05: f05,
		F06: f06,
		F07: f07,
		F08: f08,
		F09: f09,
		F10: f10,
		F11: f11,
		F12: f12,
		F13: f13,
		F14: f14,
		F15: f15,
	}
}

var _ buf.Encode = (*Sample)(nil)

func (v *Sample) Encode(w []byte) []byte {
	w = buf.EncodeField(w, 1, func (w []byte) []byte {
		return buf.EncodeU8(w, v.F01.Get())
	})
	w = buf.EncodeField(w, 2, func (w []byte) []byte {
		return buf.EncodeU16(w, v.F02.Get())
	})
	w = buf.EncodeField(w, 3, func (w []byte) []byte {
		return buf.EncodeU32(w, v.F03.Get())
	})
	w = buf.EncodeField(w, 4, func (w []byte) []byte {
		return buf.EncodeU64(w, v.F04.Get())
	})
	w = buf.EncodeField(w, 5, func (w []byte) []byte {
		return buf.EncodeU128(w, v.F05.Get())
	})
	w = buf.EncodeField(w, 6, func (w []byte) []byte {
		return buf.EncodeI8(w, v.F06.Get())
	})
	w = buf.EncodeField(w, 7, func (w []byte) []byte {
		return buf.EncodeI16(w, v.F07.Get())
	})
	w = buf.EncodeField(w, 8, func (w []byte) []byte {
		return buf.EncodeI32(w, v.F08.Get())
	})
	w = buf.EncodeField(w, 9, func (w []byte) []byte {
		return buf.EncodeI64(w, v.F09.Get())
	})
	w = buf.EncodeField(w, 10, func (w []byte) []byte {
		return buf.EncodeI128(w, v.F10.Get())
	})
	w = buf.EncodeField(w, 11, func (w []byte) []byte {
		return buf.EncodeString(w, v.F11.Get())
	})
	w = buf.EncodeField(w, 12, func (w []byte) []byte {
		return buf.EncodeBytes(w, v.F12.Get())
	})
	w = buf.EncodeField(w, 13, func (w []byte) []byte {
		return buf.EncodeVec[string](w, v.F13.Get(), func(w []byte, v string) []byte {
			return buf.EncodeString(w, v)
		})
	})
	w = buf.EncodeField(w, 14, func (w []byte) []byte {
		return buf.EncodeHashMap[string, []byte](
			w, v.F14.Get(),
			func(w []byte, k string) []byte {
				return buf.EncodeString(w, k)
			},
			func(w []byte, v []byte) []byte {
				return buf.EncodeBytes(w, v)
			},
		)
	})
	w = buf.EncodeField(w, 15, func (w []byte) []byte {
		return buf.EncodeHashSet[string](w, v.F15.Get(), func(w []byte, v string) []byte {
			return buf.EncodeString(w, v)
		})
	})
	w = buf.EncodeU32(w, buf.EndMarker)
	return w
}

var _ buf.Decode = (*Sample)(nil)

func (v *Sample) Decode(r []byte) ([]byte, error) {
	foundF01 := false
	foundF02 := false
	foundF03 := false
	foundF04 := false
	foundF05 := false
	foundF06 := false
	foundF07 := false
	foundF08 := false
	foundF09 := false
	foundF10 := false
	foundF11 := false
	foundF12 := false
	foundF13 := false
	foundF14 := false
	foundF15 := false

	for len(r) > 0 {
		r2, id, err := buf.DecodeID(r)
		if err != nil {
			return nil, err
		}
		r = r2

		switch id {
			case 1:
				r2, value, err := buf.DecodeNonZeroU8(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F01 = value
				foundF01 = true
			case 2:
				r2, value, err := buf.DecodeNonZeroU16(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F02 = value
				foundF02 = true
			case 3:
				r2, value, err := buf.DecodeNonZeroU32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F03 = value
				foundF03 = true
			case 4:
				r2, value, err := buf.DecodeNonZeroU64(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F04 = value
				foundF04 = true
			case 5:
				r2, value, err := buf.DecodeNonZeroU128(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F05 = value
				foundF05 = true
			case 6:
				r2, value, err := buf.DecodeNonZeroI8(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F06 = value
				foundF06 = true
			case 7:
				r2, value, err := buf.DecodeNonZeroI16(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F07 = value
				foundF07 = true
			case 8:
				r2, value, err := buf.DecodeNonZeroI32(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F08 = value
				foundF08 = true
			case 9:
				r2, value, err := buf.DecodeNonZeroI64(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F09 = value
				foundF09 = true
			case 10:
				r2, value, err := buf.DecodeNonZeroI128(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F10 = value
				foundF10 = true
			case 11:
				r2, value, err := buf.DecodeNonZeroString(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F11 = value
				foundF11 = true
			case 12:
				r2, value, err := buf.DecodeNonZeroBytes(r)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F12 = value
				foundF12 = true
			case 13:
				r2, value, err := buf.DecodeNonZeroVec[string](r, func(r []byte) ([]byte, string, error) {
					return buf.DecodeString(r)
				})
				if err != nil {
					return nil, err
				}
				r = r2
				v.F13 = value
				foundF13 = true
			case 14:
				r2, value, err := buf.DecodeNonZeroHashMap[string, []byte](
					r,
					func(r []byte) ([]byte, string, error) {
						return buf.DecodeString(r)
					},
					func(r []byte) ([]byte, []byte, error) {
						return buf.DecodeBytes(r)
					},
				)
				if err != nil {
					return nil, err
				}
				r = r2
				v.F14 = value
				foundF14 = true
			case 15:
				r2, value, err := buf.DecodeNonZeroHashSet[string](r, func(r []byte) ([]byte, string, error) {
					return buf.DecodeString(r)
				})
				if err != nil {
					return nil, err
				}
				r = r2
				v.F15 = value
				foundF15 = true
			case buf.EndMarker:
				break
		}
	}

	if !foundF01 {
		return nil, buf.MissingFieldError{
			ID:    1
			Field: "f01"
		}
	}
	if !foundF02 {
		return nil, buf.MissingFieldError{
			ID:    2
			Field: "f02"
		}
	}
	if !foundF03 {
		return nil, buf.MissingFieldError{
			ID:    3
			Field: "f03"
		}
	}
	if !foundF04 {
		return nil, buf.MissingFieldError{
			ID:    4
			Field: "f04"
		}
	}
	if !foundF05 {
		return nil, buf.MissingFieldError{
			ID:    5
			Field: "f05"
		}
	}
	if !foundF06 {
		return nil, buf.MissingFieldError{
			ID:    6
			Field: "f06"
		}
	}
	if !foundF07 {
		return nil, buf.MissingFieldError{
			ID:    7
			Field: "f07"
		}
	}
	if !foundF08 {
		return nil, buf.MissingFieldError{
			ID:    8
			Field: "f08"
		}
	}
	if !foundF09 {
		return nil, buf.MissingFieldError{
			ID:    9
			Field: "f09"
		}
	}
	if !foundF10 {
		return nil, buf.MissingFieldError{
			ID:    10
			Field: "f10"
		}
	}
	if !foundF11 {
		return nil, buf.MissingFieldError{
			ID:    11
			Field: "f11"
		}
	}
	if !foundF12 {
		return nil, buf.MissingFieldError{
			ID:    12
			Field: "f12"
		}
	}
	if !foundF13 {
		return nil, buf.MissingFieldError{
			ID:    13
			Field: "f13"
		}
	}
	if !foundF14 {
		return nil, buf.MissingFieldError{
			ID:    14
			Field: "f14"
		}
	}
	if !foundF15 {
		return nil, buf.MissingFieldError{
			ID:    15
			Field: "f15"
		}
	}

	return r, nil
}


