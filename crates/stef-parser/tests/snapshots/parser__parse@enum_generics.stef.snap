---
source: crates/stef-parser/tests/parser.rs
description: "/// Enum with generics.\nenum Sample<A, B, C, D> {\n    One @1,\n    Two(A @1, B @2) @2,\n    Three {\n        field1: C @1,\n        field2: D @2,\n    } @3,\n}"
input_file: crates/stef-parser/tests/inputs/enum_generics.stef
---
Schema {
    path: Some(
        "enum_generics.stef",
    ),
    source: "/// Enum with generics.\nenum Sample<A, B, C, D> {\n    One @1,\n    Two(A @1, B @2) @2,\n    Three {\n        field1: C @1,\n        field2: D @2,\n    } @3,\n}\n",
    comment: Comment(
        [],
    ),
    definitions: [
        Enum(
            Enum {
                comment: Comment(
                    [
                        CommentLine {
                            value: "Enum with generics.",
                        },
                    ],
                ),
                attributes: Attributes(
                    [],
                ),
                name: Name {
                    value: "Sample",
                },
                generics: Generics(
                    [
                        Name {
                            value: "A",
                        },
                        Name {
                            value: "B",
                        },
                        Name {
                            value: "C",
                        },
                        Name {
                            value: "D",
                        },
                    ],
                ),
                variants: [
                    Variant {
                        comment: Comment(
                            [],
                        ),
                        name: Name {
                            value: "One",
                        },
                        fields: Unit,
                        id: Id {
                            value: 1,
                        },
                    },
                    Variant {
                        comment: Comment(
                            [],
                        ),
                        name: Name {
                            value: "Two",
                        },
                        fields: Unnamed(
                            [
                                UnnamedField {
                                    ty: Type {
                                        value: External(
                                            ExternalType {
                                                path: [],
                                                name: Name {
                                                    value: "A",
                                                },
                                                generics: [],
                                            },
                                        ),
                                    },
                                    id: Id {
                                        value: 1,
                                    },
                                },
                                UnnamedField {
                                    ty: Type {
                                        value: External(
                                            ExternalType {
                                                path: [],
                                                name: Name {
                                                    value: "B",
                                                },
                                                generics: [],
                                            },
                                        ),
                                    },
                                    id: Id {
                                        value: 2,
                                    },
                                },
                            ],
                        ),
                        id: Id {
                            value: 2,
                        },
                    },
                    Variant {
                        comment: Comment(
                            [],
                        ),
                        name: Name {
                            value: "Three",
                        },
                        fields: Named(
                            [
                                NamedField {
                                    comment: Comment(
                                        [],
                                    ),
                                    name: Name {
                                        value: "field1",
                                    },
                                    ty: Type {
                                        value: External(
                                            ExternalType {
                                                path: [],
                                                name: Name {
                                                    value: "C",
                                                },
                                                generics: [],
                                            },
                                        ),
                                    },
                                    id: Id {
                                        value: 1,
                                    },
                                },
                                NamedField {
                                    comment: Comment(
                                        [],
                                    ),
                                    name: Name {
                                        value: "field2",
                                    },
                                    ty: Type {
                                        value: External(
                                            ExternalType {
                                                path: [],
                                                name: Name {
                                                    value: "D",
                                                },
                                                generics: [],
                                            },
                                        ),
                                    },
                                    id: Id {
                                        value: 2,
                                    },
                                },
                            ],
                        ),
                        id: Id {
                            value: 3,
                        },
                    },
                ],
            },
        ),
    ],
}
