{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "STEF Schema",
  "scopeName": "source.stef",
  "fileTypes": [
    "stef"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#mod"
    },
    {
      "include": "#struct"
    },
    {
      "include": "#enum"
    },
    {
      "include": "#const"
    },
    {
      "include": "#use"
    },
    {
      "include": "#alias"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.documentation.stef comment.line.triple-slash.stef",
          "begin": "///",
          "end": "$\\n?"
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "name": "meta.preprocessor.stef",
          "begin": "#\\[",
          "end": "\\]$\\n?"
        }
      ]
    },
    "mod": {
      "begin": "(mod)\\s+([a-zA-Z0-9_]+)\\s*(?=\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.mod.stef"
        },
        "2": {
          "name": "entity.name.class.mod.stef"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#attributes"
        },
        {
          "include": "$self"
        },
        {
          "include": "#struct"
        },
        {
          "include": "#enum"
        },
        {
          "include": "#const"
        },
        {
          "include": "#use"
        },
        {
          "include": "#alias"
        }
      ]
    },
    "struct": {
      "patterns": [
        {
          "begin": "(struct)\\s+([a-zA-Z0-9_]+)\\s*(<.+>)?\\s*(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.struct.stef storage.type.struct.stef"
            },
            "2": {
              "name": "entity.name.class.struct.named.stef"
            },
            "3": {
              "patterns": [
                {
                  "include": "#generics"
                }
              ]
            }
          },
          "end": "(?<=\\})",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#fieldsNamed"
            }
          ]
        },
        {
          "begin": "(struct)\\s+([a-zA-Z0-9_]+)\\s*(<.+>)?\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.struct.stef storage.type.struct.stef"
            },
            "2": {
              "name": "entity.name.class.struct.unnamed.stef"
            },
            "3": {
              "patterns": [
                {
                  "include": "#generics"
                }
              ]
            }
          },
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#fieldsUnnamed"
            }
          ]
        },
        {
          "match": "(struct)\\s+([a-zA-Z0-9_]+)",
          "captures": {
            "1": {
              "name": "keyword.declaration.struct.stef storage.type.struct.stef"
            },
            "2": {
              "name": "entity.name.class.struct.unit.stef"
            }
          }
        }
      ]
    },
    "enum": {
      "begin": "(enum)\\s+([a-zA-Z0-9_]+)\\s*(<.+>)?\\s*(?=\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.enum.stef storage.type.enum.stef"
        },
        "2": {
          "name": "entity.name.class.enum.stef"
        },
        "3": {
          "patterns": [
            {
              "include": "#generics"
            }
          ]
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#variants"
        }
      ]
    },
    "variants": {
      "patterns": [
        {
          "begin": "([a-zA-Z0-9_]+)\\s*(?=\\{)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.class.enum.variant.named.stef"
            }
          },
          "end": "(?<=\\})\\s*(@\\d+)(,)?",
          "endCaptures": {
            "1": {
              "name": "constant.numeric.stef"
            },
            "2": {
              "name": "punctuation.comma.stef"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#fieldsNamed"
            }
          ]
        },
        {
          "begin": "([a-zA-Z0-9_]+)\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.class.enum.variant.unnamed.stef"
            }
          },
          "end": "(?<=\\))\\s*(@\\d+)(,)?",
          "endCaptures": {
            "1": {
              "name": "constant.numeric.stef"
            },
            "2": {
              "name": "punctuation.comma.stef"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#fieldsUnnamed"
            }
          ]
        },
        {
          "match": "([a-zA-Z0-9_]+)\\s*(@\\d+)(,)?",
          "captures": {
            "1": {
              "name": "entity.name.class.enum.variant.unit.stef"
            },
            "2": {
              "name": "constant.numeric.stef"
            },
            "3": {
              "name": "punctuation.comma.stef"
            }
          }
        }
      ]
    },
    "fieldsNamed": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.brackets.curly.open"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.brackets.curly.close"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#fieldNamed"
        }
      ]
    },
    "fieldNamed": {
      "patterns": [
        {
          "match": "\\s*([a-zA-Z0-9_]+)\\s*(:)\\s*(.+?)\\s*(@\\d+)(,)?",
          "captures": {
            "1": {
              "name": "variable.language.stef variable.other.stef"
            },
            "2": {
              "name": "punctuation.colon.stef"
            },
            "3": {
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            "4": {
              "name": "constant.numeric.stef"
            },
            "5": {
              "name": "punctuation.comma.stef"
            }
          }
        }
      ]
    },
    "fieldsUnnamed": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.brackets.round.open"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.brackets.round.close"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#fieldUnnamed"
        }
      ]
    },
    "fieldUnnamed": {
      "patterns": [
        {
          "match": "(.+?)\\s*(@\\d+)(,)?",
          "captures": {
            "1": {
              "name": "storage.type.stef",
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            "2": {
              "name": "constant.numeric.stef"
            },
            "3": {
              "name": "punctuation.comma.stef"
            }
          }
        }
      ]
    },
    "generics": {
      "begin": "<",
      "beginCaptures": {
        "0": {
          "name": "punctuation.brackets.angle.open"
        }
      },
      "end": ">",
      "endCaptures": {
        "0": {
          "name": "punctuation.brackets.angle.close"
        }
      },
      "patterns": [
        {
          "include": "#type"
        },
        {
          "name": "punctuation.comma.stef",
          "match": ","
        }
      ]
    },
    "type": {
      "patterns": [
        {
          "name": "storage.type.builtin.stef",
          "match": "(bool|[iu](?:8|16|32|64|128)|f(?:32|64)|&?(?:string|bytes)|box<(?:string|bytes)>)"
        },
        {
          "name": "storage.type.builtin.tuple.stef",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.brackets.round.open"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.round.close"
            }
          },
          "patterns": [
            {
              "include": "#type"
            },
            {
              "name": "punctuation.comma.stef",
              "match": ","
            }
          ]
        },
        {
          "name": "storage.type.builtin.array.stef",
          "match": "(\\[)([^;]+)\\s*(;)\\s*(\\d+)(\\])",
          "captures": {
            "1": {
              "name": "punctuation.brackets.square.open"
            },
            "2": {
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            "3": {
              "name": "punctuation.semicolon.stef"
            },
            "4": {
              "name": "constant.numeric.stef"
            },
            "5": {
              "name": "punctuation.brackets.square.close"
            }
          }
        },
        {
          "name": "storage.type.builtin.vec.stef",
          "match": "vec(<.+>)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#generics"
                }
              ]
            }
          }
        },
        {
          "name": "storage.type.builtin.hash_map.stef",
          "match": "hash_map(<.+,.+>)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#generics"
                }
              ]
            }
          }
        },
        {
          "name": "storage.type.builtin.hash_set.stef",
          "match": "hash_set(<.+>)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#generics"
                }
              ]
            }
          }
        },
        {
          "name": "storage.type.builtin.option.stef",
          "match": "option(<.+>)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#generics"
                }
              ]
            }
          }
        },
        {
          "name": "storage.type.builtin.non_zero.stef",
          "match": "non_zero(<.+>)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#generics"
                }
              ]
            }
          }
        },
        {
          "name": "storage.type.external.stef",
          "match": "[a-zA-Z0-9_]+(<.+>)?",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#generics"
                }
              ]
            }
          }
        }
      ]
    },
    "const": {
      "patterns": [
        {
          "match": "(const)\\s+([a-zA-Z0-9_]+)\\s*(:)\\s*(.+?)\\s*=\\s*(.+)(;)",
          "captures": {
            "1": {
              "name": "keyword.declaration.const.stef storage.type.const.stef"
            },
            "2": {
              "name": "entity.name.class.const.stef"
            },
            "3": {
              "name": "punctuation.colon.stef"
            },
            "4": {
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            "5": {
              "patterns": [
                {
                  "include": "#literal"
                }
              ]
            },
            "6": {
              "name": "punctuation.semicolon.stef"
            }
          }
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "name": "constant.bool.stef",
          "match": "(true|false)"
        },
        {
          "name": "constant.numeric.stef",
          "match": "\\d+(\\.\\d+)?"
        },
        {
          "name": "string.quoted.stef",
          "match": "\".+\""
        },
        {
          "name": "constant.bytes.stef",
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.brackets.square.open"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.square.close"
            }
          },
          "patterns": [
            {
              "name": "constant.numeric.stef",
              "match": "\\d+"
            },
            {
              "name": "punctuation.comma.stef",
              "match": ","
            }
          ]
        }
      ]
    },
    "use": {
      "patterns": [
        {
          "match": "(use)\\s+([a-zA-Z0-9_]+(?:::[a-zA-Z0-9_]+))(.+)?(;)",
          "captures": {
            "1": {
              "name": "keyword.declaration.use.stef"
            },
            "2": {
              "name": "entity.name.namespace.stef"
            },
            "3": {
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            "4": {
              "name": "punctuation.semicolon.stef"
            }
          }
        }
      ]
    },
    "alias": {
      "patterns": [
        {
          "match": "(type)\\s+(.+?)\\s*=\\s*(.+?)(;)",
          "captures": {
            "1": {
              "name": "keyword.declaration.alias.stef storage.type.alias.stef"
            },
            "2": {
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#type"
                }
              ]
            },
            "4": {
              "name": "punctuation.semicolon.stef"
            }
          }
        }
      ]
    },
    "id": {
      "patterns": [
        {
          "name": "constant.numeric.stef",
          "match": "@\\d+"
        }
      ]
    }
  }
}
