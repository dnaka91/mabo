$schema: "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
name: "STEF Schema"
scopeName: source.stef
fileTypes: [stef]

patterns:
  - include: "#comments"
  - include: "#mod"
  - include: "#struct"
  - include: "#enum"

repository:
  comments:
    patterns:
      - name: comment.line.documentation.stef comment.line.triple-slash.stef
        begin: ///
        end: $\n?

  attributes:
    patterns:
      - name: meta.preprocessor.stef
        begin: '#\['
        end: $\]\n?

  mod:
    begin: (mod)\s+([a-z][a-z0-9_]*)\s*(?=\{)
    beginCaptures:
      "1": { name: keyword.declaration.mod.stef }
      "2": { name: entity.name.class.mod.stef }
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "$self"
      - include: "#struct"
      - include: "#enum"

  struct:
    begin: (struct)\s+([A-Z][A-Za-z0-9_]*)\s*(<.+>)?\s*(?=\{)
    beginCaptures:
      "1": { name: keyword.declaration.struct.stef storage.type.struct.stef }
      "2": { name: entity.name.class.struct.stef }
      "3": { patterns: [include: "#generics"] }
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#fieldsNamed"
      - include: "#fieldsUnnamed"

  enum:
    begin: (enum)\s+([A-Z][A-Za-z0-9_]*)\s*(?=\{)
    beginCaptures:
      "1": { name: keyword.declaration.enum.stef storage.type.enum.stef }
      "2": { name: entity.name.class.enum.stef }
    end: (?<=\})
    patterns:
      - include: "#comments"
      - include: "#variants"
  variants:
    patterns:
      - begin: ([A-Z][A-Za-z0-9_]*)\s*(?=\{)
        beginCaptures:
          "1": { name: entity.name.class.enum.variant.named.stef }
        end: (?<=\})\s*(@\d+)(,)?
        endCaptures:
          "1": { name: constant.numeric.stef }
          "2": { name: punctuation.comma.stef }
        patterns:
          - include: "#comments"
          - include: "#fieldsNamed"
      - begin: ([A-Z][A-Za-z0-9_]*)\s*(?=\()
        beginCaptures:
          "1": { name: entity.name.class.enum.variant.unnamed.stef }
        end: (?<=\))\s*(@\d+)(,)?
        endCaptures:
          "1": { name: constant.numeric.stef }
          "2": { name: punctuation.comma.stef }
        patterns:
          - include: "#comments"
          - include: "#fieldsUnnamed"
      - match: ([A-Z][A-Za-z0-9_]*)\s*(@\d+)(,)?
        captures:
          "1": { name: entity.name.class.enum.variant.unit.stef }
          "2": { name: constant.numeric.stef }
          "3": { name: punctuation.comma.stef }

  fieldsNamed:
    begin: \{
    beginCaptures:
      "0": { name: punctuation.brackets.curly.open }
    end: \}
    endCaptures:
      "0": { name: punctuation.brackets.curly.close }
    patterns:
      - include: "#comments"
      - include: "#fieldNamed"
  fieldNamed:
    patterns:
      - match: \s*([a-z][a-z0-9_]*)\s*(:)\s*([A-Za-z0-9_&<>\[\]\(\);, ]+)\s*(@\d+)(,)?
        captures:
          "1": { name: variable.language.stef variable.other.stef }
          "2": { name: punctuation.colon.stef }
          "3": { patterns: [include: "#type"] }
          "4": { name: constant.numeric.stef }
          "5": { name: punctuation.comma.stef }
  fieldsUnnamed:
    begin: \(
    beginCaptures:
      "0": { name: punctuation.brackets.round.open }
    end: \)
    endCaptures:
      "0": { name: punctuation.brackets.round.close }
    patterns:
      - include: "#comments"
      - include: "#fieldUnnamed"
  fieldUnnamed:
    patterns:
      - match: ([A-Za-z0-9_&<>\[\]\(\);, ]+)\s*(@\d+)(,)?
        captures:
          "1": { name: storage.type.stef }
          "2": { name: constant.numeric.stef }
          "3": { name: punctuation.comma.stef }

  generics:
    begin: "<"
    beginCaptures:
      "0": { name: punctuation.brackets.angle.open }
    end: ">"
    endCaptures:
      "0": { name: punctuation.brackets.angle.close }
    patterns:
      - match: ([A-Za-z0-9_&\[\]\(\)<>;, ]+?)\s*(,)?
        captures:
          "1": { name: storage.type.stef }
          "2": { name: punctuation.comma.stef }

  type:
    patterns:
      - name: storage.type.builtin.stef
        match: (bool|[iu](?:8|16|32|64|128)|f(?:32|64)|&?(?:string|bytes)|box<(?:string|bytes)>)
      - name: storage.type.builtin.tuple.stef
        begin: \(
        beginCaptures:
          "0": { name: punctuation.brackets.round.open }
        end: \)
        endCaptures:
          "0": { name: punctuation.brackets.round.close }
        patterns:
          - include: "#type"
          - name: punctuation.comma.stef
            match: ","
      - name: storage.type.builtin.array.stef
        match: (\[)([^;]+)\s*(;)\s*(\d+)(\])
        captures:
          "1": { name: punctuation.brackets.square.open }
          "2": { patterns: [include: "#type"] }
          "3": { name: punctuation.semicolon.stef }
          "4": { name: constant.numeric.stef }
          "5": { name: punctuation.brackets.square.close }
      - name: storage.type.builtin.vec.stef
        match: vec(<.+>)
        captures:
          "1": { patterns: [include: "#generics"] }
      - name: storage.type.builtin.hash_map.stef
        match: hash_map(.+,.+>)
        captures:
          "1": { patterns: [include: "#generics"] }
      - name: storage.type.builtin.hash_set.stef
        match: hash_set(<.+>)
        captures:
          "1": { patterns: [include: "#generics"] }
      - name: storage.type.builtin.option.stef
        match: option(<.+>)
        captures:
          "1": { patterns: [include: "#generics"] }
      - name: storage.type.builtin.non_zero.stef
        match: non_zero(<.+>)
        captures:
          "1": { patterns: [include: "#generics"] }

  id:
    patterns:
      - name: constant.numeric.stef
        match: '@\d+'
